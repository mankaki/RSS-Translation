<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title><![CDATA[Apple News, Rumors, Reviews, Prices & Deals | AppleInsider]]></title><link/> https://appleinsider.com<atom:link href="https://rsshub.app/appleinsider" rel="self" type="application/rss+xml"></atom:link><description><![CDATA[Apple News, Rumors, Reviews, Prices & Deals | AppleInsider - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]></description><generator> RS集线器</generator><webmaster>i@diygod.me (DIYgod)</webmaster><language> zh-cn</language><lastbuilddate> 2023 年 8 月 7 日星期一 01:35:21 GMT</lastbuilddate><ttl> 120 </ttl><item><title><![CDATA[Understanding MetalKit: Getting started with Apple's graphics framework]]></title><description><![CDATA[<div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><h2 data-anchor="getting-started" id="getting-started">入门</h2></div><div class="col-sm-12"><p>Metal 是 Apple 的 3D 图形和游戏管道，用于在 Apple 设备上渲染 3D 对象。 Metal 旨在取代 OpenGL 和其他 3D 框架，其优点是针对 Apple 硬件进行了优化，以实现最大性能。</p></div><div class="col-sm-12"><p> Apple 在 Apple 设备上提供极其流畅的 3D 渲染，其性能水平是其他 3D 框架无法实现的。</p></div><div class="col-sm-12"><p>如果您订阅并运行 Apple 的 Arcade 游戏应用程序，您可能已经在 iOS 或<a href="https://appleinsider.com/inside/macos" title="苹果系统" data-kpt="1">macOS</a>设备上看到了 Metal 渲染的示例。 Arcade中的简介动画是用Metal渲染的： </p></div><div class="col-sm-12"><div class="primis-ad-wrap"></div></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55525-112889-metal-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112889-metal-xl.jpg" alt="使用 Metal 渲染的 Apple Arcade 应用程序简介。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div></div><div class="col-sm-12"><p>在 2015 年的<a href="https://appleinsider.com/inside/wwdc" title="全球开发者大会" data-kpt="1">WWDC</a>上，Apple 推出了另一个更高级别的 Metal 框架，称为 MetalKit。该框架提供了一些高级功能，使 3D 应用程序开发变得更加简单，从而使 Metal 的使用变得更加容易。</p></div><div class="col-sm-12"><p>具体来说，MetalKit 在以下领域提供了额外的 Metal API：</p></div><div class="col-sm-12"><ol>纹理加载模型I/O视图管理</ol></div><div class="col-sm-12"><h2 data-anchor="texture-loading" id="texture-loading">纹理加载</h2></div><div class="col-sm-12"><p>使用 MetalKit，通过使用<code>MTKTextureLoader</code>类可以更轻松地加载资源和纹理。此类提供了一种加载资源和纹理以及设置纹理选项的简单方法。</p></div><div class="col-sm-12"><p>这些选项包括<em>mipmap</em>使用和加载、缓存和存储模式、纹理坐标转换、立方体纹理使用和 RGB 颜色选项。</p></div><div class="col-sm-12"><p> mipmap（或 MIP 贴图）只是一个多层图像，每一层的分辨率逐渐低于前一层。 Mipmap 用于加速图像渲染并消除锯齿伪像，例如莫尔图案。</p></div><div class="col-sm-12"><p>莫尔图案是一种分散注意力的条带或色彩伪影图案，有时出现在由线条或规则像素图案（例如交替像素网格）组成的计算机图形中：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55525-112879-moire-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112879-moire-xl.jpg" alt="莫尔图案。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">莫尔图案。</span></div></div><div class="col-sm-12"><p> MTKTextureLoader 的完整文档可在 Apple 开发者网站的 Metal 框架文档（Documentation/MetalKit/MTKTextureLoader）中找到。</p></div><div class="col-sm-12"><h2 data-anchor="model-io" id="model-io">型号输入/输出</h2></div><div class="col-sm-12"><p>Model I/O 是 Apple 用于管理 3D 和 2D 资产的开发人员框架。 MetalKit 的模型 I/O 集成包括用于将纹理快速加载到 Metal 缓冲区并使用容器使用网格数据的 API。</p></div><div class="col-sm-12"><p>目前 MetalKit 中有大约六个与模型 I/O 相关的类，主要处理网格。 （我们很快就会介绍类和面向对象编程）。</p></div><div class="col-sm-12"><h2 data-anchor="view-management" id="view-management">查看管理</h2></div><div class="col-sm-12"><p>大多数<a href="https://appleinsider.com/inside/ios" title="iOS系统" data-kpt="1">iOS</a>和 macOS 应用程序都使用<em>视图</em>- 在屏幕上呈现视觉信息和 UI 元素的标准类。不同的视图子类提供不同类型的视图。</p></div><div class="col-sm-12"><p>例如，在 iOS 中，UIView 是视图基类，但 UIButton 是从 UIView 派生的按钮视图类。通过在 iOS 或 macOS 中使用面向对象的视图类，您可以构建依赖于 Apple 类已定义的标准功能的附加功能。</p></div><div class="col-sm-12"><p>这称为<em>对象继承</em>。将应用程序中的对象视为封装代码和代码操作的数据的代码包。通过将两者捆绑在一起形成对象，代码可以很容易地被其他对象重用和改变用途。</p></div><div class="col-sm-12"><p>特别是在 MetalKit 中，提供了一个新类 - MTKView，它允许开发人员在应用程序中创建成熟的 Metal 视图。通过拥有专用的 Metal 视图类，可以通过 Metal 最佳地绘制和管理视图，而无需任何额外的代码。</p></div><div class="col-sm-12"><p> Apple 的 MTKView 文档位于开发者网站 Documentation/MetalKit/MTKView。 MTKView 还要求您首先在其属性之一中设置 MTLDevice，以告诉它将 Metal 对象渲染到哪个设备和屏幕中。</p></div><div class="col-sm-12"><p>当询问您可以将纹理渲染到哪个时，MTKView 还提供了 MTLRenderPassDescriptor。查看 Apple 开发者网站的文档/金属/渲染通道部分。</p></div><div class="col-sm-12"><h2 data-anchor="a-little-oop" id="a-little-oop">一点面向对象编程</h2></div><div class="col-sm-12"><p>在<em>面向对象编程</em>（OOP）中，对象由<em>类</em>定义。类是源代码文件中的定义，它定义了对象包含的内容，在<a href="https://appleinsider.com/inside/swift" title="迅速" data-kpt="1">Swift</a>中，定义了对象的实际实现。</p></div><div class="col-sm-12"><p>类定义了可以接收其他对象发送给它们的<em>消息</em>以执行某些功能的方法（函数）。每个方法都包含执行某些工作的代码。</p></div><div class="col-sm-12"><p>类还定义可以包含数据的<em>属性</em>或变量。通常，类的方法对类的属性执行一些工作。大多数（但不是所有）方法可以读取类或其<em>超类</em>（父类）之一中包含的大多数（但不是全部）属性。</p></div><div class="col-sm-12"><p>以上所有内容称为对象<em>封装</em>。对象封装数据和方法以保持一切整洁和有组织。在一个地方传输、引用、复制和使用对象及其关联数据比单独跟踪数据更容易。</p></div><div class="col-sm-12"><p><em>继承</em>是一种 OOP 功能，通过它可以从另一个类定义新类。派生对象称为<em>子类</em>，父类称为<em>超类</em>。</p></div><div class="col-sm-12"><p>长链对象可以通过子类化来定义。继承非常强大，因为它允许您几乎无需任何工作即可重用现有代码。</p></div><div class="col-sm-12"><p>子类继承其父类的所有行为和属性，几乎不需要任何额外的工作。子类可以添加只有它们（或其子类）知道的附加方法。</p></div><div class="col-sm-12"><p>更好的是，当您在程序中<em>实例化</em>（创建）对象的<em>实例</em>（一个副本）时，它还会<em>自动</em>实例化其所有超类对象的副本。</p></div><div class="col-sm-12"><p>使用一行代码，您只需创建一个类的实例即可获得大量的程序功能。</p></div><div class="col-sm-12"><p>实例化只是创建一个对象，在 RAM 中为其分配内存，并使其可供程序使用。</p></div><div class="col-sm-12"><p>所有这些通常都定义在一个源代码文件中，或者在 Objective-C 的情况下定义在两个源代码文件中——通常每个类一到两个文件。</p></div><div class="col-sm-12"><p>因此，在我们上面的讨论中，MTKView 被定义为一个类（由 Apple 定义），并在代码中创建时（由您）实例化。结果是内存中的 MTKView 对象可供使用。当不再需要 MTKView 对象时，它会<em>被解除分配</em>，从而将其从内存中删除并销毁。</p></div><div class="col-sm-12"><p>大多数应用程序都是创建、使用、管理和销毁数百个此类对象的程序。</p></div><div class="col-sm-12"><p> OOP 编程范式非常强大，因为它通过子类化和<em>重用</em>大大减少了所需的代码量，并通过封装代码和数据使程序更加模块化和可重用。</p></div><div class="col-sm-12"><p>一旦编写了一个类来执行某些特定工作，您就可以简单地在另一个程序中重用该类或对其进行子类化，以快速创建另一个应用程序。 </p></div><div class="col-sm-12"><h2 data-anchor="core-animation-in-metalkit" id="core-animation-in-metalkit">MetalKit 中的核心动画</h2></div><div class="col-sm-12"><p>与许多 iOS 或 macOS 标准视图一样，MTKView 也有一个<em>核心动画层</em>。 Core Animation 是Apple 的高性能2D 动画框架。</p></div><div class="col-sm-12"><p>大多数视图都有一个<em>CALayer</em> - 一个核心动画层对象，可以绘制 2D 图形并为其设置动画。 CALayers 可以分组和组合以创建复杂的动画。</p></div><div class="col-sm-12"><p> MTKView 有自己的 CALayer 子类，称为 CAMetalLayer，Metal 可以渲染到其中。您可以将 CAMetalLayer 与其他 CA 层组合起来以创建组合的 2D 和 3D 动画。</p></div><div class="col-sm-12"><p>在大多数情况下，对于 2D 和 3D CALayers，绘图比 UIView 中的绘图更快、更高效。您还可以设置 CA 图层的不透明度或<em>alpha</em> ，使其部分透明。</p></div><div class="col-sm-12"><h2 data-anchor="mtkview-modes" id="mtkview-modes"> MTKView 模式</h2></div><div class="col-sm-12"><p>MTKView支持三种绘图模式：</p></div><div class="col-sm-12"><ol>明确的定时通知</ol></div><div class="col-sm-12"><p>在定时绘图中，视图按对象内部设置的定期间隔更新。当游戏场景以每秒帧数 (fps) 描述的特定速率渲染或绘制时，大多数游戏都会使用此模式。</p></div><div class="col-sm-12"><p>使用定时模式，您还可以设置或清除<code>isPaused</code>属性来启动和停止视图动画。</p></div><div class="col-sm-12"><p>在通知模式下，当所有视图的某些部分变得无效时，就会发生重绘。这允许您仅重绘视图或图层的一部分 - 这会花费更少的时间并提高游戏性能。</p></div><div class="col-sm-12"><p>要使用通知模式强制重绘，只需向视图对象发送 setNeedsDisplay() 消息以强制其重绘。这会强制视图通过向每个子视图发送 setNeedsDisplay() 消息来重绘所有子视图。</p></div><div class="col-sm-12"><p>在显式绘制中，您可以通过直接向视图对象发送draw()消息来重绘视图内容。通常不鼓励这样做，除非您使用一些自定义绘图工作流程来执行标准视图/子视图层次结构之外的操作。</p></div><div class="col-sm-12"><p>您还可以通过发送子视图 setNeedsDisplay() 消息来仅重绘视图的一部分，从而绕过顶级视图重绘。一般来说，重绘的对象越少，性能就越好。</p></div><div class="col-sm-12"><p>对于 MTKView 或其子类，在绘图方法中，您从视图中获取 MTLRenderPassDescriptor，渲染到其中，然后呈现生成的可<em>绘制对象</em>以供显示。</p></div><div class="col-sm-12"><p>可绘制对象是任何已编码并准备好显示的 Metal 对象。</p></div><div class="col-sm-12"><h2 data-anchor="mtkviewdelegate" id="mtkviewdelegate"> MTKViewDelegate</h2></div><div class="col-sm-12"><p>在 Apple 的 Swift 和 Objective-C 编程语言中，<em>委托</em>是代表另一个对象执行某些工作的对象。</p></div><div class="col-sm-12"><p>通常，一个对象会声明一个委托对象作为其属性之一，委托声明它提供哪些方法（函数）。</p></div><div class="col-sm-12"><p>委托非常强大，因为您只需更改对象的委托属性即可更改对象的行为。委托还用于为对象提供附加功能，而无需子类化一个对象来创建另一个对象。</p></div><div class="col-sm-12"><p> <code>MTKView</code>有自己的委托对象，称为<code>MTKViewDelegate</code>类，Apple 文档中也对此进行了描述。 <code>MTKViewDelegate</code>主要响应视图重绘和调整大小事件。</p></div><div class="col-sm-12"><p> <code>MTKViewDelegate</code>还继承了所有 Apple 对象通用的标准 Objective-C 协议，称为<em>NSObjectProtocol</em> 。</p></div><div class="col-sm-12"><p>将委托和协议视为可以附加到或“粘合”到其他对象的附加对象和方法。</p></div><div class="col-sm-12"><p>在 Objective-C 和 Swift 中，<em>协议</em>只是类必须实现的附加方法的列表。协议中每个方法的内容由每个类定义。</p></div><div class="col-sm-12"><p> <code>MTKViewDelegate</code>主要关注更改视图的布局（例如，在设备旋转上）和绘图。</p></div><div class="col-sm-12"><p>例如，您可以定义多个<code>MTKViewDelegate</code>对象，每个对象都有不同的行为，然后只需将其<code>delegate</code>属性重置为任意一个委托对象并重新绘制即可更改<code>MTKView</code>的绘制或旋转行为。</p></div><div class="col-sm-12"><h2 data-anchor="rendering" id="rendering">渲染</h2></div><div class="col-sm-12"><p>使用<code>MTKView</code>时，在渲染器中实现<code>MTKViewDelegate</code>的方法。这允许您的渲染器与<code>MTKView</code>交互并提供绘图和布局更改。</p></div><div class="col-sm-12"><p>您可以使用 MTKView 的<code>currentRenderPassDescriptor</code>属性获取何时渲染每一帧的信息。这允许您与要渲染的每个帧进行交互。</p></div><div class="col-sm-12"><p>例如在 Swift 中：</p></div><div class="col-sm-12"><p> <code>if let onscreenDescriptor = view.currentRenderPassDescriptor</code></p></div><div class="col-sm-12"><p>这将获取<code>MTKView</code>的当前渲染通道描述符并将其存储在名为<code>onscreenDescriptor</code>变量中。</p></div><div class="col-sm-12"><p>渲染后，您必须使用可绘制对象来更新视图的内容。为此，请调用<code>MTLCommandBuffer</code>对象上的 present(_:) 方法，然后将<code>commit()</code>消息和命令缓冲区发送到 GPU 进行显示。</p></div><div class="col-sm-12"><p> <code>MTKView</code>的文档中有对此过程的更详细讨论。</p></div><div class="col-sm-12"><h2 data-anchor="simd" id="simd">单指令多数据流</h2></div><div class="col-sm-12"><p>苹果还有一个名为<em>SIMD 的</em>数学相关框架，在操作 3D 和 2D 对象以及对它们和矩阵执行计算时，它会派上用场。这些函数中的大多数用于执行 3D 计算中常见的快速、高效的浮点数学。</p></div><div class="col-sm-12"><p>当您需要变换 3D 对象和对象上的顶点时，SIMD 会派上用场。 SIMD 中最常见和最有用的数据结构是<code>simd_float4x4</code> ，它是单精度浮点值的 4×4 矩阵。 </p></div><div class="col-sm-12"><h2 data-anchor="tying-it-all-together-in-xcode" id="tying-it-all-together-in-xcode">在 Xcode 中将它们整合在一起</h2></div><div class="col-sm-12"><p>掌握了所有这些背景知识后，您现在就可以在<a href="https://appleinsider.com/inside/xcode" title="Xcode" data-kpt="1">Xcode</a>中创建 MetalKit 应用程序了。在以下示例中，我们假设您将创建一个简单的 3D 应用程序，其中包含单个场景，该场景包含单个 Metal 3D 对象。</p></div><div class="col-sm-12"><p>要编写 Xcode MetalKit 应用程序，您需要熟悉 Apple 的 Swift 和 Objective-C 编程语言，以及一点 ANSI-C - 一种早期的纯 C 语言，由贝尔实验室于 1972 年创建 UNIX 时发明。</p></div><div class="col-sm-12"><p>首先，打开 Xcode，然后从“文件”菜单中选择<strong>“文件”->;“新建项目”</strong> 。从项目模板选择器中，选择顶部的<strong>iOS</strong>或<strong>macOS</strong> ，然后从下面的图标中选择<strong>游戏</strong>并单击<strong>下一步</strong>：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55525-112880-xcode-1-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112880-xcode-1-xl.jpg" alt="选择了" game="" template.="" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">选择“游戏”模板。</span></div></div><div class="col-sm-12"><p>在下一个窗格中输入应用程序名称、捆绑包 ID 和组织信息，然后从下面的两个弹出菜单中选择<strong>Swift</strong>和<strong>Metal</strong> ：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55525-112881-xcode-2-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112881-xcode-2-xl.jpg" alt="输入项目详细信息。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">输入项目详细信息。</span></div></div><div class="col-sm-12"><p>单击<strong>下一步</strong>并将新的 Xcode 项目保存到磁盘。</p></div><div class="col-sm-12"><p>您还需要将 3D 对象的纹理图像定义为 .png 文件，并将其添加到您的 Xcode 项目中。该纹理文件在渲染时“包裹”到您的 3D 对象上。</p></div><div class="col-sm-12"><p> Xcode 的 Metal 游戏模板应用程序提供了应用程序所需的最小默认模板源文件，但首先，您需要添加 Metal 框架以告诉 Xcode 在运行时将这些框架链接到您的应用程序。</p></div><div class="col-sm-12"><p>为此，在 Xcode 项目编辑器中，通过选择项目窗口左上角的项目图标来选择项目名称，然后在 Targets 部分下选择目标名称右侧的目标名称：</p></div><div class="col-sm-12"><div class="align-center"><a href="https://photos5.appleinsider.com/gallery/55525-112882-Screenshot-3-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112882-Screenshot-3-xl.jpg" alt="选择目标。" height="621" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">选择目标。</span></div></div><div class="col-sm-12"><p>滚动到窗口底部，在“框架、库和嵌入内容”部分下，单击<strong>“+”</strong>按钮。将出现框架选择窗格。</p></div><div class="col-sm-12"><div class="align-center"><a href="https://photos5.appleinsider.com/gallery/55525-112884-Screenshot-2-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112884-Screenshot-2-xl.jpg" alt="点击" button.="" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">单击“+”按钮。</span></div></div><div class="col-sm-12"><p>在顶部的搜索框中输入“metal”，然后按住 Command 键单击列出的七个框架中的六个（不包括“MetalFX.framework”）。有数百个可用的 Xcode 框架。</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55525-112883-Screenshot-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112883-Screenshot-xl.jpg" alt="添加框架表。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">添加框架表。</span></div></div><div class="col-sm-12"><p>您还需要添加 libswiftsimd.tbd 库、核心服务框架以及可选的 Accelerate 框架。</p></div><div class="col-sm-12"><p> “tbd”是<em>“待定”</em>的占位符，因为实际代码库的版本号可能会发生变化。在 Xcode 中包含 .tbd 库会告诉 Xcode 使用该库的<em>最新</em>版本。</p></div><div class="col-sm-12"><p>如果您想使用 Model I/O 来管理资产，还需添加“libswiftModelIO.tbd”和“ModelIO.framework”。</p></div><div class="col-sm-12"><p>如果您在模板选择器中创建了 iOS 应用程序，还需添加 UIKit.framework。如果您在模板选择器中创建了 macOS 应用程序，还请添加 Cocoa.framework。</p></div><div class="col-sm-12"><p>最后，包括 Foundation.framework 和 CoreFoundation.framework。 Foundation 是大多数 iOS 和 macOS 应用程序使用的核心 C 语言框架。所有 Foundation API 调用均采用纯 C 语言。</p></div><div class="col-sm-12"><h2 data-anchor="shaders" id="shaders">着色器</h2></div><div class="col-sm-12"><p>Metal 游戏应用程序的完整代码超出了本文的范围，因此我们将在此简要介绍单对象示例的基础知识。 Apple 的示例项目模板创建了一个在空间中旋转的 3D 立方体。</p></div><div class="col-sm-12"><p> Xcode 创建一个控制应用程序本身的常规事件循环的应用程序委托文件，以及一个<code>ShaderTypes.h</code>文件，该文件是定义着色器的网格和顶点信息的头文件，以及定义投影矩阵和模型视图矩阵的 C 结构体。</p></div><div class="col-sm-12"><p>这些由着色器在绘图时使用。</p></div><div class="col-sm-12"><p> “Shaders.metal”文件导入上面定义的“ShaderTypes.h”头文件，该文件在渲染器和 GameViewController.swift 文件之间共享，我们稍后会得到它。您可以使用<code>import</code>预处理器指令将头文件导入到其他 Swift 或 Objective-C 源代码文件中：</p></div><div class="col-sm-12"><p> <code>#import &quot;ShaderTypes.h&quot;</code></p></div><div class="col-sm-12"><p>预处理器指令是在实际编译<em>之前</em>运行的编译器指令，通常以“#”符号开头。</p></div><div class="col-sm-12"><p> “Shaders.metal”还使用早期的 ANSI-C 导入指令<code>#include</code>导入其他两个文件， <code>metal_stdlib</code>和<code>simd.h</code> #import 和 #include 都很相似，这里我们不会详细讨论两者之间的区别。</p></div><div class="col-sm-12"><p>在下面你会看到这一行：</p></div><div class="col-sm-12"><p> <code>using namespace metal;</code></p></div><div class="col-sm-12"><p><em>命名空间</em>是一种 C++ 习惯用法，允许通过在命名空间下定义相似或相同的代码部分来定义和隔离它们。每个命名空间都有自己的名称，在本例中<code>metal</code> 。</p></div><div class="col-sm-12"><p>在 Shaders.metal 中，您定义<code>Vertex</code>和<code>ColorInOut</code>结构，以及定义着色器的几个函数 - 在本例中只有顶点着色器和片段着色器。片段着色器还包含一个采样器变量，您可以根据需要定义和使用 mipmap。</p></div><div class="col-sm-12"><p> <code>fragmentShader</code>函数将颜色信息、SharderTypes.h 中定义的<code>Uniforms</code>结构以及 Metal 库标头“metal_texture”中定义的<code>texture2d</code>作为其参数。</p></div><div class="col-sm-12"><p>如前所述， <code>Uniforms</code>参数包含投影矩阵和模型视图矩阵。</p></div><div class="col-sm-12"><h2 data-anchor="renderer" id="renderer">渲染器</h2></div><div class="col-sm-12"><p>下一个文件 Renderer.swift 定义了对象的<code>Renderer</code>类，该类继承自 Objective-C 基类<code>NSObject</code>并符合<code>MTKViewDelegate</code>协议。</p></div><div class="col-sm-12"><p>作为一个历史记录，NSObject 可以追溯到 NeXT Computer 时代——<a href="https://appleinsider.com/inside/steve-jobs" title="史蒂夫·乔布斯" data-kpt="1">史蒂夫·乔布斯</a>1985 年被 Apple 解雇后的第二家公司。NeXT 发明了 Objective-C，并拥有一个名为<em>NeXTStep</em>的操作系统和框架。 <code>NSObject</code>中的“NS”代表“NeXTStep”。</p></div><div class="col-sm-12"><p>大多数早期的 NeXTStep 对象都有前缀“NS”，以区别于第三方对象。当 Apple 于 1997 年收购 NeXT Computer Inc. 时，它获得了 NeXT 的所有技术，包括 NeXTStep。</p></div><div class="col-sm-12"><p>迄今为止，macOS 和 iOS 仍基于 NeXTStep。</p></div><div class="col-sm-12"><p> Renderer 类的属性包括 MTLDevice、MTLCommandQueue、MTLBuffer、MTLRenderPipelineState、MTLDepthStencilState 和 MTLTexture 以及矩阵、旋转、网格和信号量的属性。</p></div><div class="col-sm-12"><p><em>信号量</em>是一个线程（执行路径），它依赖于一个标志来告诉它何时可以运行以及何时不能运行。</p></div><div class="col-sm-12"><p>当您实例化<code>Render</code>对象时，您可以在其<code>init</code>方法中向其传递一个<code>MTKView</code> ，我们稍后会介绍该方法。</p></div><div class="col-sm-12"><p>一旦创建了对象，它的<code>init</code>方法就会运行，并且该方法中的所有代码都会运行。</p></div><div class="col-sm-12"><p> <code>init</code>方法在方法顶部设置并分配其所有属性，然后通过 self.device.makeBuffer() 行创建渲染缓冲区。</p></div><div class="col-sm-12"><p>然后它在传入<code>init</code>方法的 metalKitView 上设置一些属性，通过<code>Renderer.buildMetalVertexDescriptor()</code>创建顶点描述符，然后通过<code>Renderer.buildRenderPipelineWithDevice()</code>构建渲染管道。</p></div><div class="col-sm-12"><p>接下来，代码创建深度和模板信息，然后通过<code>Renderer.buildMesh</code>创建网格。</p></div><div class="col-sm-12"><p>最后，它通过<code>Renderer.loadTexture()</code>构建颜色图和纹理。</p></div><div class="col-sm-12"><p>您需要使用渲染器的纹理加载器方法<code>loadTexture:device:textureName:</code>从上面创建的 .png 文件加载纹理 - 传递纹理的文件名 - 在本例中为<code>&quot;ColorMap&quot;</code> 。</p></div><div class="col-sm-12"><p> <code>do/catch</code> Swift 构造用于错误处理。尝试执行<code>do</code>中包含的代码，如果失败，则运行<code>catch</code>块，否则程序继续正常执行。 </p></div><div class="col-sm-12"><h2 data-anchor="the-superclasss-init-method" id="the-superclasss-init-method">超类的 init() 方法</h2></div><div class="col-sm-12"><p>最后，在渲染器的<code>init</code>方法结束时，运行<em>超类的</em><code>init</code>方法：</p></div><div class="col-sm-12"><p> <code>super.init()</code></p></div><div class="col-sm-12"><p>在 Swift 类的<code>init</code>方法末尾发送<code>super.init()</code>消息到超类可确保创建类层次结构中的整个对象链。这是 Swift 和 Objective-C 中的标准模式。</p></div><div class="col-sm-12"><p>如果您无法调用超类的<code>init</code>方法，则该对象很可能会崩溃，或者充其量无法正常运行 - 或者您的应用程序本身将会崩溃。</p></div><div class="col-sm-12"><p>由于子类在运行时依赖于超类方法，因此如果超类对象不存在，则子类的方法调用可能会被发送到随机内存空间，而它所期望的代码不存在。</p></div><div class="col-sm-12"><p>当发生这种情况并且处理器尝试在该内存位置执行代码时，肯定会发生崩溃 - 那里没有代码可以运行。</p></div><div class="col-sm-12"><p> <code>super.init()</code>通常在 Swift 和 Objective-C 中<em>最后</em>调用，以便让您的对象有时间在设置超类对象之前进行所需的任何设置。</p></div><div class="col-sm-12"><p>最后，渲染器的<code>init</code>方法以右大括号“}”结束。</p></div><div class="col-sm-12"><h2 data-anchor="renderer-methods" id="renderer-methods">渲染器方法</h2></div><div class="col-sm-12"><p>Renderer.swift 中的<code>init()</code>方法之后是 Renderer 类中其他方法的实际实现。每个 Swift 函数都以<code>class func</code>为前缀，后跟函数名称，以及括号中的任何函数参数。</p></div><div class="col-sm-12"><p>如果 Swift 方法在完成时返回一个值，则该返回值类型由<code>->;</code>构造定义。例如：</p></div><div class="col-sm-12"><p> <code>class func buildMetalVertexDescriptor() ->; MTLVertexDescriptor</code>定义了一个名为<code>buildMetalVertexDescriptor</code>的方法（函数），该方法在成功完成时返回<code>MTLVertexDescriptor</code> 。这称为<em>返回值</em>或返回类型。</p></div><div class="col-sm-12"><p>正如我们之前看到的， <code>buildMetalVertexDescriptor</code>方法是在对象实例化时从<code>init()</code>方法<em>内部</em>调用的。许多对象都是这样工作的。</p></div><div class="col-sm-12"><p>但大多数方法也可以从外部对象调用，除非类定义明确禁止。</p></div><div class="col-sm-12"><h2 data-anchor="game-loop" id="game-loop">游戏循环</h2></div><div class="col-sm-12"><p>渲染器游戏循环以及渲染器和 MTKView 的<code>draw</code>方法驱动大多数 Metal 游戏。这与应用程序委托对象中监视的主事件循环相结合，驱动应用程序在设备上运行。</p></div><div class="col-sm-12"><p>在 Render.swift 文件中，您会注意到一个名为<code>private func updateGameState()</code>的方法，该方法可以定期运行以更新游戏中存储的任何状态，例如对象位置、鼠标、键盘或游戏控制器输入、位置、计时、分数等</p></div><div class="col-sm-12"><p>Swift 关键字<code>private</code>意味着此方法是私有的，并且只能从此对象和此源文件中定义的任何扩展调用 - 外部对象无法将该消息发送到 Renderer 对象。</p></div><div class="col-sm-12"><p>这种额外的访问控制确保仅从某些对象内部和由某些对象正确执行程序 - 在这种情况下，由于渲染器负责游戏的一般执行和控制，因此您不希望任何外部对象干扰它。</p></div><div class="col-sm-12"><p> Apple 在<a href="https://docs.swift.org/">Swift 文档</a>网站上的 Swift 开发人员文档中拥有完整的对象访问控制部分。</p></div><div class="col-sm-12"><h2 data-anchor="frame-rendering" id="frame-rendering">帧渲染</h2></div><div class="col-sm-12"><p>接下来在 Renderer.swift 中，我们看到了<code>draw()</code>方法：</p></div><div class="col-sm-12"><p> <code>func draw(in view: MTKView)</code></p></div><div class="col-sm-12"><p>您传入要在其中完成绘图的 MTKView。请注意，该函数没有返回值。 Swift 和 Objective-C 中的此类函数称为 void 函数。</p></div><div class="col-sm-12"><p>在每帧调用一次的<code>draw()</code>方法中，信号量被告知等待一定的时间：</p></div><div class="col-sm-12"><p> <code>inFlightSemaphore.wait()</code></p></div><div class="col-sm-12"><p>然后创建命令缓冲区并将其发送到信号量进行渲染，添加<em>完成处理程序</em>。</p></div><div class="col-sm-12"><p><em>完成处理程序</em>是一个在其他任务或线程完成时自动运行的函数。完成处理程序是一种以顺序方式执行代码的方法，但仅当代码的其他部分完成时才执行。</p></div><div class="col-sm-12"><p>完成处理程序提供有保证的代码执行，但无需编写代码来管理复杂的计时器算法和等待条件。</p></div><div class="col-sm-12"><p>接下来，3D 对象缓冲区和游戏状态按以下顺序更新：</p></div><div class="col-sm-12"><p> <code>self.updateDynamicBufferState()</code></p></div><div class="col-sm-12"><p> <code>self.updateGameState()</code></p></div><div class="col-sm-12"><p>接下来，从<code>MTKView</code>获取渲染通道描述符，并更新渲染通道编码器属性：</p></div><div class="col-sm-12"><p> <code>let renderPassDescriptor = view.currentRenderPassDescriptor</code></p></div><div class="col-sm-12"><p>然后运行一个短循环来获取网格顶点描述符布局和缓冲区并将它们存储在渲染编码器中。然后设置渲染编码器的片段纹理信息：</p></div><div class="col-sm-12"><p> <code>renderEncoder.setFragmentTexture(colorMap, index: TextureIndex.color.rawValue)</code></p></div><div class="col-sm-12"><p>接下来，对于<code>.submeshes</code>数组中的每个网格（对象），调用<code>renderEncoder.drawIndexedPrimitives()</code> 。这是场景中每个对象被编码的地方。</p></div><div class="col-sm-12"><p>为了结束编码阶段，调用<code>renderEncoder.endEncoding()</code> 。现在所有对象都已准备好绘制。</p></div><div class="col-sm-12"><p>然后通过以下方式获取视图的可绘制对象：</p></div><div class="col-sm-12"><p> <code>if let drawable = view.currentDrawable</code></p></div><div class="col-sm-12"><p>如果成功，则使用以下命令绘制整个命令缓冲区：</p></div><div class="col-sm-12"><p> <code>commandBuffer.commit()</code></p></div><div class="col-sm-12"><p>对<code>commit</code>的调用实际上将场景的帧发送到 GPU 以在屏幕上显示。</p></div><div class="col-sm-12"><p>以上所有情况均以 30、60 或 120 fps 发生。</p></div><div class="col-sm-12"><p> Renderer.swift 文件以一些通用 3D 数学转换和旋转函数结尾。 </p></div><div class="col-sm-12"><h2 data-anchor="displaying-the-scene-in-a-view-onscreen" id="displaying-the-scene-in-a-view-onscreen">在屏幕上的视图中显示场景</h2></div><div class="col-sm-12"><p>您会注意到 Xcode 项目中还有两个文件：GameViewController.swift 和 Main.storyboard。这些是大多数 iOS 应用程序中的典型文件。</p></div><div class="col-sm-12"><p>典型的 iOS 应用程序包含在 UIKIt 框架中定义的中央顶级<code>UIViewController</code>类。 <code>UIViewController</code>是一个管理和控制另一个 UIKIt 类 - <code>UIView</code>类。</p></div><div class="col-sm-12"><p> <code>UIView</code>类是包含其他<code>UIView</code>子类（例如按钮、图像、文本和其他 UIKIt 对象）的类。 <code>UIView</code>是 iOS 应用程序的用户界面在屏幕上的呈现方式。</p></div><div class="col-sm-12"><p>每个<code>UIViewController</code>类都有一个名为<code>view</code>的属性，它是<code>UIView</code>的实例。视图控制器管理<code>UIView</code> 。</p></div><div class="col-sm-12"><p>如果您查看 Apple 的<code>UIViewController</code>文档，您会注意到有六种用于管理视图的方法 - 即加载视图、在视图加载时收到通知以及卸载视图的方法。</p></div><div class="col-sm-12"><p>在大多数 iOS 应用程序中，您不会直接加载顶级视图 - 您可以通过实例化您定义的<code>UIViewController</code>子类（在本例中为<code>GameViewController</code> ）来加载它。视图的用户界面部分是在 Xcode 的 Interface Builder 编辑器中创建的，或者通过纯文本 SwiftUI 视图创建的。</p></div><div class="col-sm-12"><p>通常，在创建 iOS 应用程序时，您可以通过从 Xcode 库中拖动可视组件并将其放入屏幕上的视图控制器对象中来布局 Interface Builder 中的每个视图。</p></div><div class="col-sm-12"><p>一旦您的 UI 对象全部布置在屏幕上，您可以通过按住 Control 键单击将它们连接到视图控制器的属性，然后从每个 UI 元素拖动到视图控制器的<em>第一个响应者</em>。第一响应者是视图控制器对象层次结构中能够响应该对象的消息的第一个对象。</p></div><div class="col-sm-12"><p>当您从 Control 键上释放鼠标按钮并单击并拖动到上方时，Xcode 将显示可连接对象的可用对象属性列表。</p></div><div class="col-sm-12"><p>就是这样 - 您通常不必为每个 UI 元素进行任何编码 - 当视图控制器实例化并加载到内存中时，Swift 或 Objective-C 运行时会自动为您建立所有 UI 连接。</p></div><div class="col-sm-12"><p>这极大地简化了应用程序开发。 </p></div><div class="col-sm-12"><h2 data-anchor="-storyboards-and-segues" id="-storyboards-and-segues">故事板和转场</h2></div><div class="col-sm-12"><p><em>Storyboard</em>文件后来被添加到 Xcode 中，以进一步简化 UI 布局：使用 Storyboard，您可以在视图转换之间定义<em>Segues</em> - 当用户在设备上的每个视图之间导航时，您指定的 Segue 函数将被调用，然后您可以在其中进行任何初始视图设置或清理。</p></div><div class="col-sm-12"><p> Segues 消除了大多数视图加载代码。</p></div><div class="col-sm-12"><h2 data-anchor="viewdidload" id="viewdidload"> viewDidLoad()</h2></div><div class="col-sm-12"><p>在任何情况下，当视图控制器完成加载视图时，都会调用控制器的<code>viewDidLoad()</code>方法。您可以在<code>viewDidLoad()</code>中进行所需的任何其他视图设置。一旦<code>viewDidLoad()</code>退出，视图就可以使用并显示在屏幕上给用户。</p></div><div class="col-sm-12"><p>您可以对<code>UIViewController</code>和<code>UIView</code>进行子类化，以使您的视图高度可定制。要记住的一件事是 iOS 中的大多数 UI 元素都作为属性存储在<code>UIViewController</code>子类中。</p></div><div class="col-sm-12"><p>可以完全用代码创建视图和视图控制器，而无需 Storyboard 或 Interface Builder，但这样做要复杂得多且耗时。 </p></div><div class="col-sm-12"><h2 data-anchor="gameviewcontrollerswift" id="gameviewcontrollerswift">GameViewController.swift</h2></div><div class="col-sm-12"><p>我们看一下<code>GameViewController.swift</code></p></div><div class="col-sm-12"><p>该类在文件顶部定义：</p></div><div class="col-sm-12"><p> <code>class GameViewController: UIViewController</code></p></div><div class="col-sm-12"><p>这意味着<code>GameViewController</code>是<code>UIViewController</code>的子类。</p></div><div class="col-sm-12"><p>类定义包含在匹配的开括号和闭括号（“{”和“}”）中。</p></div><div class="col-sm-12"><p>请注意， <code>GameViewController</code>类非常短 - 仅超过一页。大多数游戏处理工作发生在着色器和渲染器中。</p></div><div class="col-sm-12"><p>接下来，我们看到<code>var</code>关键字定义的两个 Swift 属性：</p></div><div class="col-sm-12"><p> <code>var renderer: Renderer!</code></p></div><div class="col-sm-12"><p> <code>var mtkView: MTKView!</code></p></div><div class="col-sm-12"><p>接下来我们看到<code>GameViewController</code>使用 Swift <code>override</code>关键字覆盖了<code>UIViewController</code>方法<code>viewDidLoad()</code> ：</p></div><div class="col-sm-12"><p> <code>override func viewDidLoad()</code></p></div><div class="col-sm-12"><p>这意味着当视图控制器加载视图并发送<code>viewDidLoad()</code>消息时，将运行<code>GameViewController</code>版本的方法而不是<code>UIViewController</code>版本。这是继承的完美示例：您可以选择让超类的方法运行，或者在子类中重写它并使用该方法。</p></div><div class="col-sm-12"><p>请注意，为了使其起作用，两个类中的两个方法的声明必须<em>相同</em>。</p></div><div class="col-sm-12"><p> <code>override func viewDidLoad()</code>所做的第一件事是向超类（ <code>UIViewController</code> ）发送<code>viewDidLoad()</code>消息。这允许<code>UIViewController</code>执行它需要执行的任何 UI 视图布局初始化。</p></div><div class="col-sm-12"><p>如果没有这个“超级”调用，视图将无法正常工作，因为它的一些内部部分将永远不会被初始化。</p></div><div class="col-sm-12"><p>接下来， <code>GameViewController</code>对象加载 MTKView 并将其存储在其内部属性<code>mtkView</code>中：</p></div><div class="col-sm-12"><p> <code>guard let mtkView = view as? MTKView else</code></p></div><div class="col-sm-12"><p> <code>guard</code>只是一个 Swift 条件测试，用于查看某件事是否成功 - 类似于<code>if</code> 。</p></div><div class="col-sm-12"><p>然后， <code>GameViewController</code>还在其内部<code>defaultDevice</code>属性中存储对设备 Metal 设备的引用。</p></div><div class="col-sm-12"><p> <code>guard let defaultDevice = MTLCreateSystemDefaultDevice() else</code></p></div><div class="col-sm-12"><p>这里要理解的重要一点是两个内部属性或变量：</p></div><div class="col-sm-12"><p> <code>var renderer: Renderer!</code></p></div><div class="col-sm-12"><p> <code>var mtkView: MTKView!</code></p></div><div class="col-sm-12"><p>存储对内存中其他对象的引用 - 在本例中是渲染器和 Metal 视图。一旦存储， <code>GameViewController</code>对象就可以随意访问这些对象。这种模式是大多数对象在 Swift 和 Objective-C 中的工作方式。</p></div><div class="col-sm-12"><p>在 Objective-C 中，这两个属性将被声明为：</p></div><div class="col-sm-12"><p> <code>Renderer *renderer = nil;</code></p></div><div class="col-sm-12"><p> <code>MTKView *mtkView = nil;</code></p></div><div class="col-sm-12"><p> <code>nil</code>是一个 Objective-C 占位符，意思是“什么都没有”，或者更具体地说，内存中没有地址。 nil 用于指示 Objective-C 属性或变量不包含任何内容。</p></div><div class="col-sm-12"><p> <code>&#39;*&#39;</code>是 C 或 Objective-C<em>指针</em>的标准指示符 - 保存对象<em>内存地址</em>而不是值的变量。指针是一个复杂的主题，因此我们不会在这里讨论它们。</p></div><div class="col-sm-12"><p>另请注意，Objective-C 和 C 代码行必须以<code>&#39;;&#39;</code>结尾（分号）。这不是可选的 - 如果没有分号，代码将无法编译，并且您会收到错误。</p></div><div class="col-sm-12"><p> Swift 删除了分号（但如果您愿意，您实际上仍然可以使用它们）。</p></div><div class="col-sm-12"><p>接下来<code>GameViewController</code>存储更多对其他对象的引用，但这次是在 mtkView 属性对象内：</p></div><div class="col-sm-12"><p> <code>mtkView.device = defaultDevice</code></p></div><div class="col-sm-12"><p> <code>mtkView.backgroundColor = UIColor.black</code></p></div><div class="col-sm-12"><p>这意味着将默认渲染设备存储在 mtkView.device 属性中，并将黑色 UIColor 存储在 tkView.backgroundColor 中。</p></div><div class="col-sm-12"><p> <code>UIColor</code>是一个标准 UIKit 对象，用于指示颜色 - 在本例中设置为黑色，它将用作场景的背景颜色。每个<code>UIColor</code>对象都有一个<code>.backgroundColor</code>属性。</p></div><div class="col-sm-12"><p>请注意，您实际上在这里所做的是将对象的引用存储在属性中，这些属性本身就是此类属性的属性。一开始这会令人困惑，但一旦掌握了窍门，就很容易理解了。</p></div><div class="col-sm-12"><p>通过跨对象链接属性，您实际上只是将对象以菊花链方式链接在一起。</p></div><div class="col-sm-12"><p>您可以让属性指向属性，指向其他对象。理论上，属性引用的深度没有限制。</p></div><div class="col-sm-12"><p>在释放（销毁）一个对象之前，您应该在类的<code>deinit()</code>方法中将其所有属性设置为<code>nil</code> ，以确保释放对其他对象的所有引用。如果不这样做，可能会导致<em>内存泄漏</em>和不需要的<em>保留周期</em>。</p></div><div class="col-sm-12"><p>在 Objective-C 中<code>deinit()</code>称为<code>dealloc</code> 。</p></div><div class="col-sm-12"><p>继续，创建<code>Renderer</code>对象，传入<code>MTKView</code>对象，并将<code>Renderer</code>的引用（指针）存储在视图控制器的<code>renderer</code>属性中：</p></div><div class="col-sm-12"><p> <code>guard let newRenderer = Renderer(metalKitView: mtkView) else</code></p></div><div class="col-sm-12"><p> <code>renderer = newRenderer</code></p></div><div class="col-sm-12"><p>首先，创建对象，然后将对其的引用存储在属性中。</p></div><div class="col-sm-12"><p>然后<em>渲染器指向 MTKView 的</em>指针被发送<code>drawableSizeWillChange</code>消息：</p></div><div class="col-sm-12"><p> <code>renderer.mtkView(mtkView, drawableSizeWillChange: mtkView.drawableSize)</code></p></div><div class="col-sm-12"><p>这让渲染器知道视图的当前可绘制大小是多少，以便在将场景发送到 GPU 时知道如何以及在何处缩放场景。请注意，可绘制尺寸已存储在<code>MTKView</code>的<code>.drawableSize</code>属性中。</p></div><div class="col-sm-12"><p> This demonstrates that you can pass an object&#39;s properties to methods as parameters.</p></div><div class="col-sm-12"><p> Finally, the view&#39;s delegate is set to the renderer itself:</p></div><div class="col-sm-12"><p> <code>mtkView.delegate = renderer</code></p></div><div class="col-sm-12"><p> Recall that in the <code>Renderer.swft</code> file the <code>Renderer</code> class is declared as conforming to the <code>MTKViewDelegate</code> protocol:</p></div><div class="col-sm-12"><p> <code>class Renderer: NSObject, MTKViewDelegate</code></p></div><div class="col-sm-12"><p> This is what allows the <code>mtkView.delegate</code> property to be set to a <code>Renderer</code> object. Without the <code>MTKViewDelegate</code> protocol conformance in the <code>Renderer</code> class definition, the <code>mtkView.delegate = renderer</code> line would likely throw a warning or error when compiled saying that the <code>renderer</code> property doesn&#39;t conform to the <code>MTKViewDelegate</code> protocol.</p></div><div class="col-sm-12"><p> Also note that one critical gotcha for newcomers to Xcode is that <em>before</em> you destroy a view controller object you must first set its <code>.delegate</code> property to <code>nil</code> . Failure to do so will guarantee your app will crash.</p></div><div class="col-sm-12"><p> This in fact applies to any Swift or Objective-C object which contains delegates - not just to view controllers.</p></div><div class="col-sm-12"><p>为什么？ Because if you don&#39;t release the reference stored in the delegate property first, between the time the containing object actually disappears from memory and the time the system realizes the object has been destroyed, some <em>other</em> object may have sent the <em>delegate</em> object <em>another</em> message.</p></div><div class="col-sm-12"><p> Not realizing the object which contained the delegate property no longer exists, the message sent to the delegate may still be waiting to be processed - and when it does get processed the delegate is now invalid because its containing object no longer exists.</p></div><div class="col-sm-12"><p> The delegate gets left dangling in memory but its containing object is long gone - and the system thus has no way to locate the delegate object the message is bound for.</p></div><div class="col-sm-12"><p> Boom - a crash.</p></div><div class="col-sm-12"><p> Sending a message to <code>nil</code> in Swift and Objective-C won&#39;t have any harmful effects, and is valid, but sending a message to an address in memory where an object is supposed to be but isn&#39;t will definitely cause a crash.</p></div><div class="col-sm-12"><h2 data-anchor="run-the-app" id="run-the-app"> Run the app</h2></div><div class="col-sm-12"><p> Now you&#39;re finally ready to run the Metal sample app.</p></div><div class="col-sm-12"><p> Click the <strong>Play</strong> button at the top of the Xcode window and the code will compile. If there are no errors and everything works, Xcode will launch the iOS Simulator and run the app in it:</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55525-112885-z-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112885-z-xl.jpg" alt="Sample app running in iOS Simulator." height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"> <span class="carousel-caption">Sample app running in iOS Simulator.</span></div></div><div class="col-sm-12"><p> Note some, but not all, Metal code won&#39;t run in the simulator. You&#39;ll have to run those Metal programs on a real iOS device instead. </p></div><div class="col-sm-12"><h2 data-anchor="final-interface-builder-tips" id="final-interface-builder-tips"> Final Interface Builder tips</h2></div><div class="col-sm-12"><p> As one last look at the sample project, we need to go over a few items in Interface Builder.</p></div><div class="col-sm-12"><div class="align-center"><a href="https://photos5.appleinsider.com/gallery/55525-112888-Screenshot-6-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112888-Screenshot-6-xl.jpg" alt="Select the Main.storyboard file in Xcode." height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"> <span class="carousel-caption">Select the Main.storyboard file in Xcode.</span></div></div><div class="col-sm-12"><p> If you are new to Xcode and Interface Builder, note that one critical aspect of iOS development most newcomers overlook is that of class names. The class names each item has in Xcode must match exactly each class name as defined in the source code files.</p></div><div class="col-sm-12"><p> If they don&#39;t, your app won&#39;t work.</p></div><div class="col-sm-12"><p> For example, the view controller must have its class name set in the Custom Class field in Xcode&#39;s object info panel on the right side. To do so you have to click the Storyboard or .nib (Interface Builder) file, then click the class name in the Scene or view hierarchy, then verify or set the class name in the inspector on the right:</p></div><div class="col-sm-12"><div class="align-center"><a href="https://photos5.appleinsider.com/gallery/55525-112886-Screenshot-7-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112886-Screenshot-7-xl.jpg" alt="Make sure class names are set in the Storyboard file." height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"> <span class="carousel-caption">Make sure class names are set in the Storyboard file.</span></div></div><div class="col-sm-12"><p> The same holds true for Views and their class names, and other objects such as delegate properties. Failure to set even one class name or property can cause an app to not work.</p></div><div class="col-sm-12"><p> Most of these usually get set in template files created by Xcode, but it doesn&#39;t hurt to check.</p></div><div class="col-sm-12"><p> One thing that oddly doesn&#39;t get set in Xcode template files are the connections between view controllers and their View properties. You have to make these connections manually or else your app won&#39;t work.</p></div><div class="col-sm-12"><p> For example in our sample project, if you Control-click on the Game View Controller object in the view hierarchy you&#39;ll notice that the View property is set to nil. You&#39;ll need to connect the View to the Game View Controller by Control-clicking and then dragging from the Game View Controller to the View in the hierarchy.</p></div><div class="col-sm-12"><p> When you do, the &quot;Outlets&quot; panel will appear and you need to connect to the &quot;view&quot; property to the Game View Controller object manually:</p></div><div class="col-sm-12"><div class="align-center"><a href="https://photos5.appleinsider.com/gallery/55525-112887-Screenshot-9-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112887-Screenshot-9-xl.jpg" alt="Connect the view controller and view via the Outlets pane." height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"> <span class="carousel-caption">Connect the view controller and view via the Outlets pane.</span></div></div><div class="col-sm-12"><p> Without this connection, the app won&#39;t work. And the sample template files created by Xcode <em>don&#39;t</em> make this connection for you by default.</p></div><div class="col-sm-12"><p> Note that the small dot next to outlet names in the Outlet panel indicates whether any given outlet is connected or not.</p></div><div class="col-sm-12"><p> You may have also noticed that the AppDelegate.swift file contains a subclass of <code>AppDelegate</code> which contains empty boilerplate code but there are no references to the <code>GameViewController</code> anywhere in the app delegate file.</p></div><div class="col-sm-12"><p> So how does the <code>GameViewController</code> get loaded when the app runs?</p></div><div class="col-sm-12"><p> The answer is the Storyboard file defines the initial view controller and loads it automatically for you when the app first runs. If you were using older .nib-style (Interface Builder) files and code to load the initial view controller, your app instead would have manually created and loaded a <code>GameViewController</code> object instance the AppDelegate&#39;s <code>application:didFinishLaunchingWithOptions</code> method.</p></div><div class="col-sm-12"><p> Once the view controller then loaded the view, you would get the viewDidLoad() message on the app delegate if you set the AppDelegate as the view controller&#39;s delegate.</p></div><div class="col-sm-12"><h2 data-anchor="additional-resources" id="additional-resources"> Additional resources</h2></div><div class="col-sm-12"><p> In addition to Apple&#39;s online MetalKit and Metal documentation, there are a number of other good Metal resources you may want to check out.</p></div><div class="col-sm-12"><p> Be sure to check out metalkit.org and metalbyexample.com which have lots of great tutorials on MetalKit and Metal itself.</p></div><div class="col-sm-12"><p> Also, be sure to get the definitive third-party book on Metal, the <a href="https://www.amazon.com/Metal-Programming-Guide-Tutorial-Reference-ebook/dp/B077Y3DGBP/?tag=reality" rel="sponsored">Metal Programming Guide: Tutorial and Reference via Swift</a> by Janie Clayton which teaches you just about everything there is to know about Metal programming.</p></div><div class="col-sm-12"><p> This has been a long tutorial, but now you should have a much greater understanding of how Metal apps work and how to use MetalKit in your apps to easily load textures and render Metal objects in views in iOS apps.</p></div><p></p> ]]>;</description><pubDate> Sun, 06 Aug 2023 20:58:13 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/inside/xcode/tips/understanding-metalkit-getting-started-with-apples-graphics-framework</guid><link/> https://appleinsider.com/inside/xcode/tips/understanding-metalkit-getting-started-with-apples-graphics-framework <author><![CDATA[Chip Loder]]></author></item><item><title><![CDATA[Grab Apple's M1 Max 16" MacBook Pro with 64GB RAM, 1TB SSD for $2,599 ($1,100 off)]]></title><description><![CDATA[<div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><h2 data-anchor="save-1100-on-a-loaded-macbook-pro" id="save-1100-on-a-loaded-macbook-pro"> Save $1,100 on a loaded MacBook Pro</h2></div><div class="col-sm-12"><p> The <a href="https://adorama.rfvk.net/c/81003/51926/1036?subId1=da-macp-16in-m1-max-64gb-1tb-2599-080523&amp;u=https%3A%2F%2Fwww.adorama.com%2Facmk1f3lla12.html" rel="sponsored" target="blank">exclusive price</a> is in the form of a $900 instant rebate stacked with promo code <strong>APINSIDER</strong> , which knocks another $200 off, bringing the price down to $2,599 at Apple Authorized Reseller Adorama.</p></div><div class="col-sm-12"><div class="align-center"> <a class="deal-highlight" href="https://prices.appleinsider.com/product/macbook-pro-16-inch-2021/z14y0016u">Use code APINSIDER</a></div></div><div class="col-sm-12"><p> This <a href="https://prices.appleinsider.com/product/macbook-pro-16-inch-2021/z14y0016u" title="M1 Max MacBook Pro 16-inch 64GB RAM 1TB SSD Silver price">particular configuration</a> features Apple&#39;s 16-inch MacBook Pro with a high-end M1 Max chip that boasts a 24-core GPU. It also has 64GB of memory, quadruple the amount found in the standard Late 2021 MacBook Pro. Storage is ample at 1TB, further future-proofing the machine, which is housed in Apple&#39;s elegant silver chassis. </p></div><div class="col-sm-12"><h2 data-anchor="bonus-discount-applecare-with-coupon" id="bonus-discount-applecare-with-coupon"> Bonus discount AppleCare with coupon</h2></div><div class="col-sm-12"><p> Along with the aggressive discount on the laptop itself, the same APINSIDER promo code takes $80 off three years of AppleCare when purchased alongside the system, bringing the cost down to $319 for the extended protection plan, offering added peace of mind.</p></div><div class="col-sm-12"><p> According to our <a href="https://prices.appleinsider.com/macbook-pro-16-inch-2021">16-inch MacBook Pro Price Guide</a> , which tracks the <a href="https://appleinsider.com/deals/best-macbook-pro-deals">best MacBook Pro deals</a> across current and closeout lines, this is the best price available for the premium configuration.</p></div><div class="col-sm-12"><p> Activating the APINSIDER coupon can be done in three easy steps.</p></div><div class="col-sm-12"><ol><li> Shop through this <a href="https://adorama.rfvk.net/c/81003/51926/1036?subId1=da-macp-16in-m1-max-64gb-1tb-2599-080523&amp;u=https%3A%2F%2Fwww.adorama.com%2Facmk1f3lla12.html" rel="sponsored" target="blank">pricing link</a> and add the 16-inch MacBook Pro to your cart.</li><li> Proceed to checkout and when you get to step 3 (Payment), look for a link with a gift icon that says: &quot;Do you have a gift card or promo code?&quot;<div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/51735-102497-Screenshot-2022-12-02-at-11619-PM-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/51735-102497-Screenshot-2022-12-02-at-11619-PM-xl.jpg" alt="How to open Adorama coupon code field" height="166" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div></li><li> Click that link to bring up the coupon code field and enter APINSIDER. Here&#39;s what it looks like:<div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/51735-102499-Screenshot-2022-12-02-at-11458-PM-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/51735-102499-Screenshot-2022-12-02-at-11458-PM-xl.jpg" alt="Where to enter Adorama coupon code" height="210" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a> <span class="carousel-caption"></span></div></li></ol></div><div class="col-sm-12"><h2 data-anchor="plus-save-with-even-more-deals" id="plus-save-with-even-more-deals">另外，享受更多优惠，节省更多</h2></div><div class="col-sm-12"><div class="align-center"><a href="https://prices.appleinsider.com/"><img src="https://photos5.appleinsider.com/gallery/47002-91572-Apple-Price-Guide-hero-graphic-xl.jpg" alt="最优惠的苹果价格" height="720" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div></div><div class="col-sm-12"><p>从新款 MacBook Air 15 英寸到 M2 Mac mini， <em>AppleInsider</em>读者可以抢购更多 Apple 硬件的独家折扣。请务必访问我们的<a href="https://prices.appleinsider.com/">Apple 价格指南</a>，了解 Apple 经销商的最新销售和特别优惠。</p></div><div class="col-sm-12"><ul><li> <strong><a href="https://appleinsider.com/articles/23/08/02/apples-13-inch-m2-macbook-air-is-on-sale-for-949-just-in-time-for-back-to-school">Apple&#39;s 13-inch M2 MacBook Air is on sale for $949 in latest back-to-school deal</a></strong></li><li> <strong><a href="https://appleinsider.com/articles/23/08/03/exclusive-macbook-pro-14-16-inch-deals-save-up-to-1300-prices-start-at-1549">Exclusive MacBook Pro 14 &amp; 16-inch deals: save up to $1,300, prices start at $1,549</a></strong></li><li> <strong><a href="https://appleinsider.com/articles/23/07/08/lowest-price-ever-macbook-pro-14-inch-with-32gb-ram-1tb-ssd-on-sale-for-1999-plus-60-off-applecare">Apple MacBook Pro 14 英寸（配备 32GB RAM、1TB SSD）售价 1,999 美元，还可享受 60 美元的 AppleCare 优惠</a></strong></li><li><strong><a href="https://shop.appleinsider.com/sales/microsoft-office-home-business-for-mac-2021-lifetime-license-6?utm_source=appleinsider.com&amp;utm_medium=referral&amp;utm_campaign=microsoft-office-home-business-for-mac-2021-lifetime-license-6_071423&amp;utm_term=scsf-575207&amp;utm_content=a0x1p000004ivavqa0&amp;scsonar=1">Get Office for Mac Home &amp; Business 2021 for just $39.99, a discount of 85%</a></strong></li></ul></div><p></p> ]]>;</description><pubDate> Sun, 06 Aug 2023 20:07:56 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/articles/23/08/06/grab-apples-m1-max-16-macbook-pro-with-64gb-ram-1tb-ssd-for-2599-1100-off</guid><link/> https://appleinsider.com/articles/23/08/06/grab-apples-m1-max-16-macbook-pro-with-64gb-ram-1tb-ssd-for-2599-1100-off <author><![CDATA[Christine McKee]]></author></item><item><title><![CDATA[iPhone 15 Ultra case photos leak shows rumored 'Action' button]]></title><description><![CDATA[<p class="col-sm-12 article-lead"> Photographs of cases purportedly for the <a href="https://appleinsider.com/inside/iphone-15" title="iPhone 15" data-kpt="1">iPhone 15</a> Ultra goes along with rumors Apple is replacing the mute switch with a third &quot;Action&quot; button on the side of the smartphone.</p><div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><p> Rumors have spread for quite a while claiming that the days of the mute switch are numbered and that it will be replaced by a multi-function <a href="https://appleinsider.com/articles/23/04/17/contentious-iphone-15-pro-rumor-season-continues-with-details-about-action-button">&quot;Action&quot; button</a> . A Sunday photo leak showing what could be Apple cases for the inbound highest-specification model certainly leans into those rumors.</p></div><div class="col-sm-12"><p> The photographs from <a href="https://twitter.com/majinbuofficial/status/1688123155577966592">serial leaker</a> &quot;Majin Bu&quot; on X are identified by the leaker as being for the iPhone 15 Ultra. <a href="https://twitter.com/majinbuofficial/status/1688123941485723648">The cases</a> , consisting of green, black, and dark blue variants, appear with Apple branding on the rear, insinuating that they are actually Apple products.</p></div><div class="col-sm-12"><p> In a clarifying tweet, the leaker <a href="https://twitter.com/MajinBuOfficial/status/1688129217446174721">does state</a> &quot;It&#39;s a replica, it is not an official product.&quot; That means there&#39;s a chance the cases may not necessarily be sourced from an Apple supplier, and may not actually be real products.</p></div><div class="col-sm-12"><div class="primis-ad-wrap"></div></div><div class="col-sm-12"><p> However, as the leaker has a fairly good record when it comes to Apple-related leaks, it seems more plausible than not. </p></div><div class="col-sm-12"><div class="align-center"><blockquote class="twitter-tweet"><p lang="en" dir="ltr"> Apparently the cases of the iPhone 15 Ultra models show a third button that should replace the old mute switcher <a href="https://t.co/6XIKgBMJVN">pic.twitter.com/6XIKgBMJVN</a></p> — Majin Bu (@MajinBuOfficial) <a href="https://twitter.com/MajinBuOfficial/status/1688123155577966592?ref_src=twsrc%5Etfw">August 6, 2023</a></blockquote></div></div><div class="col-sm-12"><p> The images show the cases with three buttons on the left-hand side, with two lower buttons being slightly larger than an upper and slightly recessed third button, which also happens to be a bit smaller. This third would be the rumored Action button.</p></div><div class="col-sm-12"><p> The other photographs of the cases show that there&#39;s a continuation of Apple&#39;s normal design language in use, including the soft lining, the tell-tale ring for <a href="https://appleinsider.com/inside/magsafe" title="磁安全" data-kpt="1">MagSafe</a> , the small lip around the camera bump, and the recessed Apple logo on the rear.</p></div><div class="col-sm-12"><p> While seemingly plausible, there&#39;s no guarantee that the photos depict a legitimate product, and that no-one outside of Apple truly knows what the company will unveil this fall.</p></div><div class="col-sm-12"><p> The Action button does seem to be coming in the iPhone 15 Pro or Ultra models, with code references in <a href="https://appleinsider.com/inside/ios-17" title="iOS 17" data-kpt="1">iOS 17</a> mentioning how a button can be personalized to <a href="https://appleinsider.com/articles/23/07/26/ios-17-code-hints-at-action-button-in-iphone-15-pro-models">perform various actions</a> , such as activating a camera&#39;s autofocus with a light press and taking a photo for a full press.</p></div><p></p> ]]>;</description><pubDate> Sun, 06 Aug 2023 18:53:53 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/articles/23/08/06/iphone-15-ultra-case-photos-leak-shows-rumored-action-button</guid><link/> https://appleinsider.com/articles/23/08/06/iphone-15-ultra-case-photos-leak-shows-rumored-action-button <author><![CDATA[Malcolm Owen]]></author></item><item><title><![CDATA[Daily deals: Save $250 on the M2 Pro 14-inch MacBook Pro, 19% off Nintendo Switch, $150 off Toshiba 65-inch smart TV]]></title><description><![CDATA[<div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><p> The <em>AppleInsider</em> team scours the internet for top-notch deals at online retailers to showcase a list of unbeatable deals on popular tech products, including <a href="https://appleinsider.com/deals">discounts on Apple products</a> , TVs, accessories, and other gadgets. We post our top finds daily to help you save money. </p></div><div class="col-sm-12"><h2 data-anchor="top-deals-for-august-6" id="top-deals-for-august-6"> Top deals for August 6</h2></div><div class="col-sm-12"><ul><li> 14&quot; MacBook Pro M2 Pro (12-core CPU, 19-core GPU), 16GB Memory, 1TB SSD, Space Gray: <a href="https://prices.appleinsider.com/product/macbook-pro-14-inch-2023/mphf3ll/a">$2,249 ($250 off)</a> at Apple resellers</li><li> Prism Drive Secure Cloud Storage: Lifetime Subscription (20TB): <a href="https://shop.appleinsider.com/sales/prism-drive-secure-cloud-storage-20tb-lifetime-subscription?utm_source=appleinsider.com&amp;utm_medium=referral&amp;utm_campaign=prism-drive-secure-cloud-storage-20tb-lifetime-subscription_080223&amp;utm_term=scsf-576647&amp;utm_content=a0x1p000005ot7uqas&amp;scsonar=1" rel="sponsored" target="blank">$99.99 (33% off)</a> at StackCommerce</li><li> Philips Hue White and Color Ambiance Econic Square Outdoor Wall and Ceiling Light Fixture: <a href="https://www.amazon.com/dp/B07NDF3VPH?th=1&amp;tag=aidailydeals-20" rel="sponsored" target="blank">$117.55 (31% off)</a> at Amazon</li><li> Dyson V15 Detect Extra Cordless Vacuum: <a href="https://shop-links.co/1816001583416897754?u1=dd-othr-bby-dyson-v11-080523" rel="sponsored" target="blank">$449.99 ($350 off)</a> for Total Tech members at Best Buy</li><li> Nintendo Switch OLED (Japanese Model): <a href="https://www.anrdoezrs.net/click-1989299-13142092?sid=dd-othr-woot-nintendo-switch-080623&amp;url=https%3A%2F%2Felectronics.woot.com%2Foffers%2Fnew-nintendo-switch-oled-japanese-model" rel="sponsored" target="blank">$289.99 ($70 off)</a> at Woot</li><li> Lego Art Floral Art 31207 3-in-1 Set: <a href="https://www.amazon.com/gp/product/B09XVH1MV9/?tag=aidailydeals-20" rel="sponsored" target="blank">$55.99 ($24 off)</a> at Amazon</li><li> Save <a href="https://shop-links.co/1816016157618122371?u1=dd-othr-target-calculators-080623" rel="sponsored" target="blank">up to 30%</a> on calculators at Target</li><li> Toshiba 65-inch Class C350 LED 4K UHD Smart Fire TV: <a href="https://www.amazon.com/gp/product/B0BTTTWHBW/?tag=aidailydeals-20" rel="sponsored" target="blank">$379.99 ($150 off)</a> at Amazon </li></ul></div><div class="col-sm-12"><h2 data-anchor="more-summer-tech-bargains" id="more-summer-tech-bargains"> More summer tech bargains</h2></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55750-113276-deals-aug-5-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55750-113276-deals-aug-5-xl.jpg" alt="Bose QuietComfort 耳塞 II 享受 17% 折扣" height="731" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"> <span class="carousel-caption">Get 17% off Bose QuietComfort Earbuds II</span></div></div><div class="col-sm-12"><p> You can still buy most of the deals we shared Saturday. Check out the hottest discounts from yesterday to get the lowest prices.</p></div><div class="col-sm-12"><ul><li> 14 英寸 MacBook Pro M1 Pro，8 核 CPU，14 核 GPU，32GB RAM，512GB，银色： <a href="https://prices.appleinsider.com/product/macbook-pro-14-inch-2021/z15j001w9">1,799 美元（优惠 200 美元）</a> ，使用 Adorama 促销代码<strong>APINSIDER</strong></li><li> WD_BLACK 2TB D50 游戏扩展坞 NVMe SSD WDBA3U0020BBK-NESN：亚马逊<a href="https://www.amazon.com/dp/B08FG4RG5H?tag=aidailydeals-20" rel="sponsored" target="blank">297.97 美元（57% 折扣）</a></li><li>亚马逊 iRobot Roomba i4 和 i4 Plus <a href="https://www.amazon.com/deal/b1cec03f?showVariations=true&amp;pf_rd_r=FHMG8VGNY6XGZT5MCPCS&amp;tag=aidailydeals-20" rel="sponsored" target="blank">最高可节省 42%</a></li><li> Bose QuietComfort 45 无线耳机：亚马逊售价<a href="https://www.amazon.com/deal/373ab649?showVariations=true&amp;pf_rd_r=NT9C8E9EC48308H53815&amp;tag=aidailydeals-20" rel="sponsored" target="blank">279 美元</a></li><li>Bose QuietComfort 耳塞 II：亚马逊售价<a href="https://www.amazon.com/Bose-QuietComfort-Cancelling-Personalized-Cancellation/dp/B0BS1VXF6K?th=1&amp;tag=aidailydeals-20" rel="sponsored" target="blank">249 美元</a></li><li>eero Pro 6E AXE5400 三频网状 Wi-Fi 6E 系统（3 件装）：百思买<a href="https://shop-links.co/1815920106936186779?u1=dd-othr-bby-eero-pro-3pk-080523" rel="sponsored" target="blank">399.99 美元（优惠 150 美元）</a> </li></ul></div><div class="col-sm-12"><h2 data-anchor="plus-save-with-even-more-deals" id="plus-save-with-even-more-deals">另外，享受更多优惠，节省更多</h2></div><div class="col-sm-12"><div class="align-center"><a href="https://prices.appleinsider.com/"><img src="https://photos5.appleinsider.com/gallery/47002-91572-Apple-Price-Guide-hero-graphic-xl.jpg" alt="最优惠的苹果价格" height="720" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div></div><div class="col-sm-12"><p>从新款 MacBook Air 15 英寸到 M2 Mac mini， <em>AppleInsider</em>读者可以抢购更多 Apple 硬件的独家折扣。请务必访问我们的<a href="https://prices.appleinsider.com/">Apple 价格指南</a>，了解 Apple 经销商的最新销售和特别优惠。</p></div><div class="col-sm-12"><ul><li> <strong><a href="https://appleinsider.com/articles/23/08/02/apples-13-inch-m2-macbook-air-is-on-sale-for-949-just-in-time-for-back-to-school">Apple&#39;s 13-inch M2 MacBook Air is on sale for $949 in latest back-to-school deal</a></strong></li><li> <strong><a href="https://appleinsider.com/articles/23/08/03/exclusive-macbook-pro-14-16-inch-deals-save-up-to-1300-prices-start-at-1549">Exclusive MacBook Pro 14 &amp; 16-inch deals: save up to $1,300, prices start at $1,549</a></strong></li><li> <strong><a href="https://appleinsider.com/articles/23/07/08/lowest-price-ever-macbook-pro-14-inch-with-32gb-ram-1tb-ssd-on-sale-for-1999-plus-60-off-applecare">Apple MacBook Pro 14 英寸（配备 32GB RAM、1TB SSD）售价 1,999 美元，还可享受 60 美元的 AppleCare 优惠</a></strong></li><li><strong><a href="https://appleinsider.com/articles/23/07/20/take-81-off-a-standalone-microsoft-office-2021-license-for-windows-or-mac">购买适用于 Windows 或 Mac 的独立 Microsoft Office 2021 许可证可节省 81%</a></strong></li></ul></div><p></p> ]]>;</description><pubDate> Sun, 06 Aug 2023 15:29:05 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/articles/23/08/06/daily-deals-save-250-on-the-m2-pro-14-inch-macbook-pro-19-off-nintendo-switch-150-off-toshiba-65-inch-smart-tv</guid><link/> https://appleinsider.com/articles/23/08/06/daily-deals-save-250-on-the-m2-pro-14-inch-macbook-pro-19-off-nintendo-switch-150-off-toshiba-65-inch-smart-tv <author><![CDATA[Christine McKee]]></author></item><item><title><![CDATA[Smuggler taped-up with 68 iPhones didn't fool Chinese customs officials]]></title><description><![CDATA[<div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><p> 7月31日，该男子被中国清茂港口岸管理部门发现，该男子试图通过非申报通道，在未申报的情况下携带大量iPhone手机过关。</p></div><div class="col-sm-12"><p>然而，眼尖的官员发现了这名男子及其服装的一些问题。虽然他穿着一件藏蓝色的短袖衬衫，但身体的其他部分似乎有些不成比例。</p></div><div class="col-sm-12"><p>据<em>Cnbeta</em><a href="https://www.cnbeta.com.tw/articles/tech/1374737.htm">报道</a>，检查中发现了 68 部旧 iPhone，这些旧 iPhone 被胶带包裹捆绑在该人的腰部、腹部和小腿上。在一张照片中，薄薄的保鲜膜和包装胶带被用来将 iPhone 固定在人腿的内侧和外侧区域。</p></div><div class="col-sm-12"><div class="primis-ad-wrap"></div></div><div class="col-sm-12"><p> 据报道，该男子已根据进口法规受到处理。</p></div><div class="col-sm-12"><p>虽然通过海关走私物品并不新鲜或完全不常见，但一次走私的货物数量过多以及使用的方法却很不寻常。即便如此，这并不是第一次有人试图通过将如此多的 iPhone 粘在一个人的身上来移动它们。</p></div><div class="col-sm-12"><p> 2017 年，一名女子因在衣服内走私<a href="https://appleinsider.com/articles/17/07/18/smuggler-busted-with-102-apple-iphones-by-shenzhen-china-customs-officials">42 磅</a>违禁品被捕，其中包括 102 部 iPhone 和 15 块高端手表。与此同时<a href="https://appleinsider.com/articles/15/01/17/three-men-tunnel-into-beijing-warehouse-make-off-with-300000-worth-of-iphones">，2015 年</a>，一名男子在香港边境被捕，试图将 94 部 iPhone 走私到中国大陆，这些 iPhone 也同样用胶带和包装纸绑在他的身上。</p></div><div class="col-sm-12"><p>在每起案件中，边防警卫都收到了电话骡子不寻常的行走姿势的警报。</p></div><p></p> ]]>;</description><pubDate> Sun, 06 Aug 2023 14:04:02 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/articles/23/08/06/man-fails-to-smuggle-68-iphones-by-taping-them-to-his-body</guid><link/> https://appleinsider.com/articles/23/08/06/man-fails-to-smuggle-68-iphones-by-taping-them-to-his-body <author><![CDATA[Malcolm Owen]]></author></item><item><title><![CDATA[Hands on: connect cadence and speed sensors directly to Apple Watch with watchOS 10]]></title><description><![CDATA[<div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><p>对于狂热的自行车骑手来说，速度和踏频跟踪并不是一个新概念。许多蓝牙传感器已经存在多年，可以实现简单的数据收集，但它们需要笨拙的第三方应用程序和健康集成。</p></div><div class="col-sm-12"><p>借助<a href="https://appleinsider.com/inside/watchos-10" title="watchOS 10" data-kpt="1">watchOS 10</a> ，用户可以将兼容的传感器直接与 Apple Watch 配对。这消除了对第三方客户端的需求，并直接与锻炼、健身和健康应用程序功能集成。</p></div><div class="col-sm-12"><p>各种健康传感器可以与 Apple Watch 配对，以获取额外的跟踪指标，例如步频、速度和功率传感器。我们测试了<a href="https://www.amazon.com/dp/B088WTRDKG/?tag=reality" rel="sponsored">Moofit 的</a>速度和踏频传感器。</p></div><div class="col-sm-12"><div class="primis-ad-wrap"></div></div><div class="col-sm-12"><p> 传感器很小，并且相对容易用附带的橡皮筋连接。它们使用 CR2032 电池，可持续使用约 9 至 12 个月。</p></div><div class="col-sm-12"><p>速度传感器连接到轮毂，而踏频传感器连接到自行车的曲柄臂。一旦插入传感器电池，它们就会处于活动状态并准备配对。</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55676-113269-Cadence-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55676-113269-Cadence-xl.jpg" alt="踏频传感器" height="738" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">踏频传感器</span></div></div><div class="col-sm-12"><p>Apple Watch 的蓝牙设置立即显示了传感器。传感器名称大多是乱码，例如 CS8L-C 或类似名称，但这并不重要，只要它们都出现并配对即可。</p></div><div class="col-sm-12"><p>配对后，我们所要做的就是开始骑行并开始骑行锻炼。速度和步频指标显示在跟踪的锻炼中。</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55676-113270-Bluetooth-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55676-113270-Bluetooth-xl.jpg" alt="Apple Watch 蓝牙设置" height="738" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"> <span class="carousel-caption">Apple Watch 蓝牙设置</span></div></div><div class="col-sm-12"><p><a href="https://appleinsider.com/inside/iphone" title="iPhone" data-kpt="1">iPhone</a>上新的自行车锻炼实时活动还可以显示速度和踏频数据。一个视图有一个活跃的车速表，但蓝牙有短暂的滞后，因此如果比电动自行车的车速表慢一秒，速度也是准确的。</p></div><div class="col-sm-12"><p>那些希望从骑行活动跟踪中获得更多收益的人可以从 watchOS 10 中轻松获得提升。我们推荐类似我们测试过的 Moofit 传感器，该传感器<a href="https://www.amazon.com/dp/B088WTRDKG/?tag=reality" rel="sponsored">在亚马逊上售价 32.99 美元</a>，两包一包。</p></div><p></p> ]]>;</description><pubDate> Sun, 06 Aug 2023 11:15:02 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/articles/23/08/05/hands-on-connect-cadence-and-speed-sensors-directly-to-apple-watch-with-watchos-10</guid><link/> https://appleinsider.com/articles/23/08/05/hands-on-connect-cadence-and-speed-sensors-directly-to-apple-watch-with-watchos-10 <author><![CDATA[Wesley Hilliard]]></author></item><item><title><![CDATA[VFX behind Apple TV+ shows revealed in special event on Sunday]]></title><description><![CDATA[<div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><p>周日的 Visual Effects + Screen 活动在加利福尼亚州洛杉矶皮克福德电影研究中心的 Linwood Dunn 剧院举行，参与 Apple TV+ 节目视觉效果的人士将在台上讨论他们的工作。</p></div><div class="col-sm-12"><p> <a href="https://deadline.com/2023/08/apple-tv-deadline-visual-effects-and-screen-ted-lasso-silo-1235455425/">与</a><em>Deadline</em>联合举办的小组讨论将分享流媒体节目效果中的技术和故事。</p></div><div class="col-sm-12"><p> 《 <a href="https://appleinsider.com/articles/23/06/19/ted-lasso-cast-reflects-on-memorable-jason-sudeikis-speech-on-last-day-of-season-three">泰德·拉索</a>》第三季的视觉特效合成总监比尔·帕克 (Bill Parker) 也将出席，他因单集杰出特殊视觉效果剧集“妈妈城”获得职业生涯第三次<a href="https://appleinsider.com/articles/23/07/12/apple-tv-gains-51-emmy-awards-led-once-more-by-ted-lasso">艾美奖提名</a>。</p></div><div class="col-sm-12"><div class="primis-ad-wrap"></div></div><div class="col-sm-12"><p> 埃里克·杜斯特 (Eric Durst) 也将出席，他因《 <a href="https://appleinsider.com/articles/22/07/13/apple-tv-shares-the-first-trailer-for-five-days-at-memorial">阵亡将士纪念的五天</a>》节目“第二天”获得黄金时段艾美奖单集最佳特效奖提名。名单上还有 Daniel Rauchwerger，他是 Apple TV+ 科幻剧《 <a href="https://appleinsider.com/articles/23/06/14/apple-tv-renews-hit-silo-for-a-second-season">Silo</a> 》的视觉特效总监。</p></div><div class="col-sm-12"><p>克里斯·麦克莱恩（Chris MacLean）是《 <a href="https://appleinsider.com/articles/23/05/11/galactic-tensions-rise-as-apple-tv-series-foundation-returns-in-july">基金会</a>》节目的视觉特效总监。麦克莱恩凭借第一季获得了艾美奖提名，并凭借剧集“皇帝的和平”获得了 VES 奖。</p></div><div class="col-sm-12"><p> Visual Effects + Screen 将于 8 月 6 日在皮克福德电影研究中心举行。太平洋时间下午 1 点、东部时间上午 10 点开放，活动于太平洋时间下午 2 点、东部时间上午 11 点开始。</p></div><div class="col-sm-12"><p>那些希望参加的人需要通过<a href="https://vfxandscreen.splashthat.com/">活动网站</a>申请等候名单以确保入场。</p></div><p></p> ]]>;</description><pubDate> Sat, 05 Aug 2023 20:25:26 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/articles/23/08/05/vfx-behind-apple-tv-shows-revealed-in-special-event-on-sunday</guid><link/> https://appleinsider.com/articles/23/08/05/vfx-behind-apple-tv-shows-revealed-in-special-event-on-sunday <author><![CDATA[Malcolm Owen]]></author></item><item><title><![CDATA[Getting started with WidgetKit: Making your first macOS Widget]]></title><description><![CDATA[<div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><h2 data-anchor="what-are-widgets" id="what-are-widgets">什么是小部件？</h2></div><div class="col-sm-12"><p> Apple 几年前首先在 macOS Tiger 中引入了 Widget，后来又在 2020 年的<a href="https://appleinsider.com/inside/ios-14" title="iOS 14" data-kpt="1">iOS 14</a>中引入了 Widget。简单地说，Widget 是小程序，可以临时向用户显示信息，而无需启动成熟的应用程序。</p></div><div class="col-sm-12"><p>最初，macOS Widgets 是 macOS <em>Dashboard</em>的一部分。</p></div><div class="col-sm-12"><p>在 macOS 中，最初您将小部件拖到桌面上，它们漂浮在桌面上。后来苹果将它们全部移至 macOS 侧边栏，您可以通过单击 macOS 菜单栏右上角的时钟来访问它们。 </p></div><div class="col-sm-12"><div class="primis-ad-wrap"></div></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113011-old-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113011-old-xl.jpg" alt="最初的 macOS Widget 仪表板。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div></div><div class="col-sm-12"><p>在今年秋季的<a href="https://appleinsider.com/inside/macos-sonoma/tips/how-to-use-desktop-widgets-in-macos-sonoma">macOS Sonoma</a>中，Apple 再次允许您在桌面上显示小部件。</p></div><div class="col-sm-12"><p>目前在<a href="https://appleinsider.com/inside/macos-ventura" title="macOS 文图拉" data-kpt="1">macOS Ventura</a>中，要编辑侧边栏中的小部件，请通过单击菜单栏时钟打开侧边栏，然后按住 Control 键单击侧边栏中的任意一个小部件：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113105-WidgetKit2-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113105-WidgetKit2-xl.jpg" alt="按住 Control 键单击小部件即可对其进行编辑。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">按住 Control 键单击小部件即可对其进行编辑。</span></div></div><div class="col-sm-12"><p>要编辑侧栏中显示的小部件<em>列表</em>，请按住 Control 键单击任一小部件，然后从同一弹出菜单中选择<strong>编辑小部件</strong>。</p></div><div class="col-sm-12"><p>这将打开窗口小部件编辑器，该编辑器在右侧显示窗口小部件侧边栏，同时还在左侧窗格中显示所有可用的窗口小部件。要将小部件添加到侧边栏，请将其从左侧窗格拖动到右侧的小部件侧边栏：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113106-WidgetKit4-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113106-WidgetKit4-xl.jpg" alt="从左向右拖动一个小部件。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">从左向右拖动一个小部件。</span> </div></div><div class="col-sm-12"><h2 data-anchor="creating-your-own-widgets" id="creating-your-own-widgets">创建您自己的小部件</h2></div><div class="col-sm-12"><p>最初，Wigets 是用 HTML、CSS 和 JavaScript 编写的捆绑包，并使用 WebKit 框架。 Apple 删除了这些旧式 Widget 的大部分文档。</p></div><div class="col-sm-12"><p>如果您仍需要为早期系统创建 Widget，请查看 WROX Publishing 的 Fred Terry 编写的<em>Beginning Mac OS X Tiger Dashboard Widget Development</em> (ISBN 978-0-471-77825-7)。</p></div><div class="col-sm-12"><p>在<a href="https://appleinsider.com/inside/wwdc" title="全球开发者大会" data-kpt="1">WWDC</a> 2020 上，苹果推出了一个全新的 Widget 开发框架，名为<em>WidgetKit</em> 。 Apple 在其开发者网站<strong>Documentation/WidgetKit</strong>上提供了完整的 WidgetKit 开发者文档。</p></div><div class="col-sm-12"><p>现代 Widget 是使用 SwiftUI 中的 WidgetKit 编写的，我们稍后会介绍。您还需要 Apple 的开发人员 IDE <a href="https://appleinsider.com/inside/xcode" title="Xcode" data-kpt="1">Xcode</a> - 您可以从 Mac <a href="https://appleinsider.com/inside/app-store" title="应用商店" data-kpt="1">App Store</a>免费下载。</p></div><div class="col-sm-12"><p>要编写 Widget，您需要了解<a href="https://appleinsider.com/inside/swift" title="迅速" data-kpt="1">Swift</a>语言、SwiftUI 和 Xcode。请记住，在大多数情况下，小部件实际上是对现有应用程序的补充。</p></div><div class="col-sm-12"><p>完整的 SwiftUI 文档位于 Apple 开发者网站<strong>/Documentation/SwiftUI</strong> 。 Apple 还有一个 SwiftUI 教程页面： <strong>https://developer.apple.com/tutorials/swiftui/</strong></p></div><div class="col-sm-12"><h2 data-anchor="getting-started" id="getting-started">入门</h2></div><div class="col-sm-12"><p>创建复杂的小部件超出了本文的范围，因此我们将在这里使用一个简单的示例。在以后的文章中，我们将更深入地研究开发复杂且功能齐全的小部件。</p></div><div class="col-sm-12"><p>小部件位于应用程序<em>Bundle</em>内的<strong>/Contents/Plugins</strong>文件夹中。 macOS 和<a href="https://appleinsider.com/inside/ios" title="iOS系统" data-kpt="1">iOS</a>中的捆绑包只是一种特殊的文件夹，将所有应用程序代码和资产打包在一个位置。</p></div><div class="col-sm-12"><p>要使用您的 Widget，您需要首先使用 Xcode 创建一个 macOS 应用程序，构建它，然后构建您的 Widget 并将其安装到应用程序的<strong>/Contents/Plugins</strong>文件夹中。</p></div><div class="col-sm-12"><p>要手动执行此操作，请按住 Control 键并单击 macOS 桌面上的应用程序，然后从弹出菜单中选择<strong>“显示包内容”</strong> ：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113107-WidgetKit5-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113107-WidgetKit5-xl.jpg" alt="按住 Control 键并单击桌面上的应用程序。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">按住 Control 键并单击桌面上的应用程序。</span></div></div><div class="col-sm-12"><p>导航到<strong>/Contents/Plugins</strong>文件夹。小部件的应用程序扩展名为 .appex。</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113109-WidgetKit6-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113109-WidgetKit6-xl.jpg" alt="安装在日历应用程序内的小部件。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">安装在日历应用程序内的小部件。</span></div></div><div class="col-sm-12"><h2 data-anchor="widget-bundles" id="widget-bundles">小工具包</h2></div><div class="col-sm-12"><p>当您在 Xcode 中构建 Widget 时，它会为您创建 Bundle 文件夹，编译您的代码，并将代码二进制文件和任何所需的资源复制到 Bundle 中。</p></div><div class="col-sm-12"><p>由于小部件本身就是捆绑包，因此您还可以在 Finder 中按住 Control 键单击它们，然后再次使用弹出菜单中的<strong>“显示包内容”</strong>来查看它们的内部。</p></div><div class="col-sm-12"><p>在每个小组件包中，您将找到一个名为“Contents”的文件夹，其中包含名为“_CodeSignature”、“MacOS”和“Resources”的文件夹：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113110-WidgetKit7-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113110-WidgetKit7-xl.jpg" alt="在小部件包内。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">在小部件包内。</span></div></div><div class="col-sm-12"><p> Widget 代码本身位于“MacOS”文件夹中，大多数其他资源（例如用户界面文件、文本字符串、图像等）位于“Resources”文件夹中。 Widget Bundle 中有两个附加文件向系统描述 Bundle：“Info.plist”和“version.plist”。</p></div><div class="col-sm-12"><p>当您构建 Widget 时，这些文件由 Xcode 自动生成。</p></div><div class="col-sm-12"><h2 data-anchor="widgetkit-simulator" id="widgetkit-simulator"> WidgetKit模拟器</h2></div><div class="col-sm-12"><p>隐藏在 Mac 硬盘驱动器<strong>/System/Library/Core Services</strong>中的是一个名为<em>WidgetKit Simulator</em>的 Apple 应用程序。 WidgetKit Simulator 可让您查看应用程序内部并查看它们包含的所有小部件，然后在模拟器中打开它们以查看它们运行时的外观：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113111-sim1-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113111-sim1-xl.jpg" alt="WidgetKit 模拟器。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"> <span class="carousel-caption">WidgetKit 模拟器。</span></div></div><div class="col-sm-12"><p>为此，请运行 WidgetKit Simulator，然后选择左侧显示的任一应用程序。 macOS 知道如何查找 Mac 上安装的所有包含小部件的应用程序：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113112-sim3-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113112-sim3-xl.jpg" alt="运行 WidgetKit Simulator，选择一个应用程序，然后从右侧列表中选择一个 Widget。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">运行 WidgetKit Simulator，选择一个应用程序，然后从右侧列表中选择一个 Widget。</span></div></div><div class="col-sm-12"><p>模拟器打开小部件后，如果单击左侧的“信息”行，模拟器将显示有关小部件的所有详细信息。这与“Info.plist”和“version.plist”文件中存储的信息相同：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113115-sim4-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113115-sim4-xl.jpg" alt="WidgetKit 模拟器正在运行。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"> <span class="carousel-caption">WidgetKit 模拟器正在运行。</span></div></div><div class="col-sm-12"><p>如果您单击<strong>“快照”</strong>或<strong>“时间轴”</strong>行，模拟器将向您显示 Widget 实际运行时的样子。</p></div><div class="col-sm-12"><h2 data-anchor="widget-code" id="widget-code">小部件代码</h2></div><div class="col-sm-12"><p>当您设计和构建 Widget 时，您可以使其极其简单 - 仅使用一种尺寸和界面，或者您可以使其更加复杂，利用多种尺寸，并从网络加载数据。</p></div><div class="col-sm-12"><p>对于<a href="https://appleinsider.com/inside/ipados" title="iPad操作系统" data-kpt="1">iPadOS</a>应用程序，您可以选择超大尺寸的 Widget 用户界面。</p></div><div class="col-sm-12"><p>您还可以选择构建在 iOS 锁定屏幕上运行的小部件，或者仅在 iOS 主屏幕或 macOS 桌面上运行。在此示例中，我们将使其尽可能简单。</p></div><div class="col-sm-12"><p>为了创建 Widget，或者在 Xcode 中创建<em>Widget Extension</em> ，您首先需要一个现有的 iOS 或 macOS Xcode 应用程序项目。如果您还没有一个，请通过从“文件”菜单中选择<strong>“文件->;新建->;项目”</strong>在 Xcode 中创建一个新项目。这将打开 Xcode 模板选择器。</p></div><div class="col-sm-12"><p>在选择器中，从顶部菜单中选择“macOS”和“应用程序”，以及其下方的应用程序图标行。您可以轻松选择 iOS 应用程序，但在本例中，我们将使用 macOS：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113116-xcode1-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113116-xcode1-xl.jpg" alt="Xcode 的新项目选择器。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"> <span class="carousel-caption">Xcode 的新项目选择器。</span></div></div><div class="col-sm-12"><p>单击<strong>“下一步”</strong>按钮，然后填写项目的详细信息：产品名称、组织标识符、您想要的 UI 类型，然后选择<strong>Swift</strong>作为语言：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113117-xcode2-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113117-xcode2-xl.jpg" alt="设置项目详细信息" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">设置项目详细信息</span></div></div><div class="col-sm-12"><p>再次单击<strong>“下一步”</strong>按钮，并将新项目保存到磁盘。我们假设您知道如何创建 macOS 应用程序并已完成它，然后再继续下一步，创建小部件扩展。 </p></div><div class="col-sm-12"><h2 data-anchor="create-a-widget-extension-target" id="create-a-widget-extension-target">创建小部件扩展目标</h2></div><div class="col-sm-12"><p>Xcode 中的<em>目标</em>是包含构建一个软件所需的一切的设置 - 一个应用程序、一个小部件、一个扩展、一个捆绑包、一个驱动程序或一个库。</p></div><div class="col-sm-12"><p>每个 Xcode 项目可以包含多个 Target。</p></div><div class="col-sm-12"><p>要将小部件扩展目标添加到 Mac 应用程序，请从“文件”菜单中选择<strong>“文件”->;“新建”->;“目标”</strong> ，然后从出现的选择器中选择<strong>“小部件扩展”</strong> ：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113119-xcode3-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113119-xcode3-xl.jpg" alt="选择" widget="" extension="" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">选择“小部件扩展”。</span></div></div><div class="col-sm-12"><p>再次单击<strong>“下一步”</strong> ，然后在下一个窗格中填写小部件的所有详细信息。如果您的 Xcode 项目已有多个应用程序目标，请从底部的<strong>Embed in Application:</strong>弹出菜单中选择要嵌入 Widget Extension 的应用程序：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113120-xcode4-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113120-xcode4-xl.jpg" alt="设置要嵌入 Widget 的应用程序。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">设置要嵌入 Widget 的应用程序。</span></div></div><div class="col-sm-12"><p>单击<strong>完成</strong>按钮。您可能会收到一条警报，询问您是否要激活此小部件扩展的目标方案。单击<strong>“激活”</strong> 。</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113121-xcode5-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113121-xcode5-xl.jpg" alt="点击" activate="" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">单击“激活”。</span></div></div><div class="col-sm-12"><p>将 Xcode 中的<em>方案</em>视为构建过程中用于每个构建步骤的一组设置。您可以随时从 Xcode 主菜单中选择<strong>“产品”->;“方案”->;“编辑方案...”来</strong>编辑方案（Command-</p></div><div class="col-sm-12"><p>将新的小部件扩展目标添加到应用程序后，您会注意到 Xcode 在项目的“目标”部分下添加了一个新目标，以及一个包含一些新文件的新子文件夹：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113123-xcode6-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113123-xcode6-xl.jpg" alt="新的目标和小部件文件的文件夹" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">新的目标和小部件文件的文件夹</span></div></div><div class="col-sm-12"><p>Apple 的默认 Xcode Widget 扩展代码创建一个简单的 Calendar Widget，其中包含一个 View （UI）和三个<code>Provider</code>方法： <code>placeholder</code> 、 <code>getSnapshot</code>和<code>getTimeline</code> 。</p></div><div class="col-sm-12"><p> <code>Provider</code>结构继承自 Apple 类<code>IntentTimelineProvider</code> ，它告诉 WidgetKit 何时更新 Widget 的显示。我们很快就会看到代码。</p></div><div class="col-sm-12"><p> Widget 可以是<em>用户可配置的</em>，并且 Widget 需要知道如何根据用户的配置方式显示其数据。这就是<code>Provider</code>所做的。</p></div><div class="col-sm-12"><p> Xcode 会创建 Widget 扩展所需的所有默认源文件，创建它们并将其存储在磁盘上项目文件夹的新子文件夹中，然后将它们添加到 Xcode 项目中。</p></div><div class="col-sm-12"><p>这些文件，大致是：</p></div><div class="col-sm-12"><ol><li>包含小部件设置的 Info.plist 文件</li><li>一个 .entitlements 文件，用于控制 Widget 的功能</li><li>包含 Widget 图标的 Assets.xcassets Bundle</li><li>用于 Siri 和快捷方式自定义的 .intentdefinition 文件</li><li>扩展名为 .swift 的 Swift 文件，其中包含 Widget 的代码</li></ol></div><div class="col-sm-12"><h2 data-anchor="widget-swift-code" id="widget-swift-code"> 小部件 Swift 代码</h2></div><div class="col-sm-12"><p>在 .swift 文件顶部，代码导入了三个 Apple 框架：</p></div><div class="col-sm-12"><ol><li>导入WidgetKit</li><li>导入 SwiftUI</li><li>导入意图</li></ol></div><div class="col-sm-12"><p>.swift 文件包含 Swift 中的五个模板<code>structs</code>或结构，它们定义了 Widget 的操作方式：</p></div><div class="col-sm-12"><ol><li> <code>IntentTimelineProvider</code></li><li> <code>TimelineEntry</code></li><li> <code>View</code></li><li> <code>Widget</code></li><li> <code>PreviewProvider</code></li></ol></div><div class="col-sm-12"><p> <code>Widget</code>结构将自身声明为 Widget 的主入口点，声明<code>@main</code>位于顶部。</p></div><div class="col-sm-12"><p>最后一个结构体<code>PreviewProvider</code>提供 SwiftUI 预览，以便您可以在 Xcode 中看到您的 Widget 的外观。但为了使其工作，您需要修改结构以提供信息，包括<code>WidgetPreviewContext</code>和<code>WidgetFamily</code>枚举 (enum)，以告诉 Xcode 如何显示用户界面。</p></div><div class="col-sm-12"><p> Apple 在开发者网站上分别提供了<code>WidgetPreviewContext</code>和<code>WidgetFamily</code>的文档<strong>： Documentation/WidgetKit/WidgetPreviewContext</strong>和<strong>Documentation/WidgetKit/WidgetFamily</strong> 。</p></div><div class="col-sm-12"><p>您使用<code>WidgetFamily</code>初始化<code>WidgetPreviewContext</code> ，然后使用<code>previewContext(_:)</code>方法将其传递给<code>PreviewProvider</code> 。</p></div><div class="col-sm-12"><p> Widget 的<code>SimpleEntry</code>结构继承自 Apple 的<code>TimelineEntry</code>协议，并存储日期/时间和<code>ConfigurationIntent</code> 。 <code>TimelineEntry</code>用于告诉 WidgetKit 何时显示 Widget。</p></div><div class="col-sm-12"><p> <code>Timelines</code>是 Apple 结构，告诉 WidgetKit 何时更新 Widget 的<em>视图</em>。</p></div><div class="col-sm-12"><p> <code>Provider&#39;s</code>三个方法本质上创建一个包含日期和时间的<code>SimpleEntry</code> ，或者在<code>getTimeline()</code>方法的情况下，创建一个条目数组，用日期和时间填充它们，然后在<code>Timeline</code>中返回它们（也定义了由苹果公司提供）。</p></div><div class="col-sm-12"><p>当 Widget 的<code>@main</code>运行时，它定义一个调用<code>IntentConfiguration()</code>的<code>kind</code>和<code>body</code> 。这又调用<code>Provider()</code>和<code>View</code>结构，这就是创建要在 Widget 中显示的时间线和视图的原因：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113028-xcode7-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113028-xcode7-xl.jpg" alt="TestWidget 结构。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"> <span class="carousel-caption">TestWidget 结构。</span></div></div><div class="col-sm-12"><p>所有这些一开始似乎令人困惑，但一旦掌握了窍门，一切就很容易了。本质上，Widget 创建一个视图或一系列视图和意图，以及告诉 WidgetKit 何时以及如何显示 Widget 的时间线。</p></div><div class="col-sm-12"><p>您可以选择在 Widget 中存储其他简单或复杂类型的数据，但在这个简单的日历示例中，它仅存储 Widget 显示的日期和时间。</p></div><div class="col-sm-12"><p>您可能想知道实际视图如何显示在屏幕上的小组件中。视图由 View 结构提供，在本例中为<code>struct TestWidgetEntryView : View</code> ，它只是创建一个<code>Text</code>视图，以“时间”样式存储输入日期。</p></div><div class="col-sm-12"><p> <code>Text</code>视图只是 Apple 定义的 Swift 视图结构，它显示单行文本：</p></div><div class="col-sm-12"><p> “文本视图使用适合当前平台的正文字体在应用程序的用户界面中绘制字符串。您可以使用 font(_:) 视图修饰符选择不同的标准字体，例如标题或标题。”</p></div><div class="col-sm-12"><p>当指定的日期/时间到达时，系统只是要求 WidgetKit 提供要显示的视图。</p></div><div class="col-sm-12"><h2 data-anchor="build-it" id="build-it">建造它</h2></div><div class="col-sm-12"><p>现在您已准备好构建 macOS 应用程序及其小部件扩展。为此，请从 Xcode 的主菜单中选择<strong>“产品”->;“存档”</strong> 。这将开始编译过程。</p></div><div class="col-sm-12"><p>如果一切正常，Xcode 将链接您的 Mac 应用程序和 Widget 扩展，然后询问您要如何分发它：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113124-xcode-archive-2-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113124-xcode-archive-2-xl.jpg" alt="点击" distribute="" app="" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">点击“分发应用程序”</span></div></div><div class="col-sm-12"><p>单击<strong>“分发应用程序”</strong> 、 <strong>“复制应用程序”</strong> 、 <strong>“下一步</strong>” ，然后将应用程序保存到磁盘。</p></div><div class="col-sm-12"><p> Xcode 在您选择的位置创建一个带有时间戳的新文件夹。您的新应用程序已在新文件夹中准备就绪：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113125-xcode-archive-4-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113125-xcode-archive-4-xl.jpg" alt="构建的WidgetTestApp。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">构建的WidgetTestApp。</span></div></div><div class="col-sm-12"><p>打开文件夹，按住 Control 键单击 Finder 中的应用程序，然后从弹出菜单中选择<strong>“显示包内容”</strong> 。导航到<strong>/Contents/Plugins</strong>文件夹，您将看到应用程序的小部件：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113126-xcode-archive-7-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113126-xcode-archive-7-xl.jpg" alt="TestWidgetExtension 构建为 Widget Bundle。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"> <span class="carousel-caption">TestWidgetExtension 构建为 Widget Bundle。</span></div></div><div class="col-sm-12"><p>现在，如果您再次打开 WidgetKit Simulator，您将自动看到列出的应用程序。单击它，然后单击右侧的小部件，然后单击<strong>打开</strong>：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113127-xcode-archive-8-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113127-xcode-archive-8-xl.jpg" alt="点击" testwidget="" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">单击“测试小工具”。</span></div></div><div class="col-sm-12"><p>单击<strong>“时间轴”</strong>行，您将看到显示的 Widget 的 UI，在五小时的时间轴中每小时显示一个视图：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55509-113128-xcode-archive-9-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55509-113128-xcode-archive-9-xl.jpg" alt="随着时间的推移在时间轴中显示的一系列 Widget UI。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">随着时间的推移在时间轴中显示的一系列 Widget UI。</span></div></div><div class="col-sm-12"><p>在这个简单的示例中，我们了解了 Widget 的工作原理、如何在 Xcode 中创建它们以及如何在 WidgetKit Simulator 中预览它们。在以后的文章中，我们将通过更复杂的示例深入探讨如何创建小部件。</p></div><div class="col-sm-12"><p> Apple 有许多资源可用于学习如何创建 Widget。但请务必查看 2020 年的三部分 WWDC 视频系列“Widgets Code-along”，以及 WWDC 2018 的“Design Great Widgets”和“Meet WidgetKit”视频。</p></div><div class="col-sm-12"><p> Apple 的<em>人机界面指南中也有关于 Widget UI 的讨论<em>。</em></em></p></div><p></p> ]]>;</description><pubDate> Sat, 05 Aug 2023 15:48:27 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/inside/xcode/tips/getting-started-with-widgetkit-making-your-first-macos-widget</guid><link/> https://appleinsider.com/inside/xcode/tips/getting-started-with-widgetkit-making-your-first-macos-widget <author><![CDATA[Chip Loder]]></author></item><item><title><![CDATA[Daily deals: 17% off Bose QuietComfort Earbuds II, $600 off M1 14-inch MacBook Pro, $150 off Eero Tri-Band Mesh Wi-Fi]]></title><description><![CDATA[<div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><p> <em>AppleInsider</em>团队在网络商店中搜索无与伦比的特价商品，以制定一份热门科技产品的超值优惠清单，其中包括<a href="https://appleinsider.com/deals">Apple 产品、电视、配件和其他小玩意的折扣</a>。我们每天分享最优惠的价格，以帮助您赚更多的钱。 </p></div><div class="col-sm-12"><h2 data-anchor="top-deals-for-august-5" id="top-deals-for-august-5"> 8 月 5 日最热门优惠</h2></div><div class="col-sm-12"><ul><li>14 英寸 MacBook Pro M1 Pro，8 核 CPU，14 核 GPU，32GB RAM，512GB，银色： <a href="https://prices.appleinsider.com/product/macbook-pro-14-inch-2021/z15j001w9">1,799 美元（优惠 200 美元）</a> ，使用 Adorama 促销代码<strong>APINSIDER</strong></li><li> WD_BLACK 2TB D50 游戏扩展坞 NVMe SSD WDBA3U0020BBK-NESN：亚马逊<a href="https://www.amazon.com/dp/B08FG4RG5H?tag=aidailydeals-20" rel="sponsored" target="blank">297.97 美元（57% 折扣）</a></li><li>亚马逊 iRobot Roomba i4 和 i4 Plus <a href="https://www.amazon.com/deal/b1cec03f?showVariations=true&amp;pf_rd_r=FHMG8VGNY6XGZT5MCPCS&amp;tag=aidailydeals-20" rel="sponsored" target="blank">最高可节省 42%</a></li><li> Bose QuietComfort 45 无线耳机：亚马逊售价<a href="https://www.amazon.com/deal/373ab649?showVariations=true&amp;pf_rd_r=NT9C8E9EC48308H53815&amp;tag=aidailydeals-20" rel="sponsored" target="blank">279 美元</a></li><li>Bose QuietComfort 耳塞 II：亚马逊售价<a href="https://www.amazon.com/Bose-QuietComfort-Cancelling-Personalized-Cancellation/dp/B0BS1VXF6K?th=1&amp;tag=aidailydeals-20" rel="sponsored" target="blank">249 美元</a></li><li>eero Pro 6E AXE5400 三频网状 Wi-Fi 6E 系统（3 件装）：百思买<a href="https://shop-links.co/1815920106936186779?u1=dd-othr-bby-eero-pro-3pk-080523" rel="sponsored" target="blank">399.99 美元（优惠 150 美元）</a></li><li> Lego Ideas The Globe 21332 套装（2,585 块）：百思买<a href="https://shop-links.co/1815920286002161430?u1=dd-othr-bby-lego-globe-080523" rel="sponsored" target="blank">183.99 美元（优惠 45.96 美元）</a></li><li>乐高创意者 3 合 1 中世纪城堡玩具到塔楼或市场 31120 套装：亚马逊<a href="https://www.amazon.com/gp/product/B08Z9VYN33/?th=1&amp;tag=aidailydeals-20" rel="sponsored" target="blank">79.99 美元（优惠 20 美元）</a> </li></ul></div><div class="col-sm-12"><h2 data-anchor="more-summer-tech-bargains" id="more-summer-tech-bargains"> More summer tech bargains</h2></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55738-113261-Daily-Deals-Aug-4-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55738-113261-Daily-Deals-Aug-4-xl.jpg" alt="仅需 450 美元即可购买三星 Galaxy Tab S7+" height="720" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">仅需 450 美元即可购买三星 Galaxy Tab S7+</span></div></div><div class="col-sm-12"><p>您仍然可以购买我们周五分享的大部分优惠。 Check out the hottest discounts from yesterday to get the lowest prices.</p></div><div class="col-sm-12"><ul><li> AirPods Max (save $100) for <a href="https://www.amazon.com/New-Apple-AirPods-Max-Blue/dp/B08PZJN7BD/?tag=aidailydeals-20" rel="sponsored" target="blank">$449.99 at Amazon</a></li><li> Apple HomePod mini in new, bulk, non-retail packaging (normally $99) for <a href="https://www.tkqlhce.com/click-1989299-11911660?sid=dd---&amp;url=https%3A%2F%2Feshop.macsales.com%2Fsearch%2F%3Fq%3Dhomepods" rel="sponsored" target="_blank">$78.99 at OWC</a></li><li> Geek Squad Certified Refurbished AirPods Pro, 2nd Gen (normally $249.99, save $60) for <a href="https://shop-links.co/1815812774774598070?u1=dd---" rel="sponsored" target="_blank">$189.99 at Best Buy</a></li><li> Apple Watch Band - Sport Loop, Special Editions (normally $49, 53% off) for <a href="https://www.dpbolvw.net/click-1989299-13142105?sid=dd---&amp;url=https%3A%2F%2Fsellout.woot.com%2Foffers%2Fapple-watch-band-sport-loop-special-editions-1" rel="sponsored" target="_blank">$22.99 at Woot</a></li><li> M2 Mac mini &amp; AppleCare+ Kit (save $120) for <a href="https://www.bhphotovideo.com/c/product/1753590-REG/apple_mac_mini_applecare.html/BI/1717/KBID/2301/SID/dd---" rel="sponsored" target="_blank">$778 at B&amp;H</a></li><li> OWC 14-Port Thunderbolt Dock (normally $279.99, extra $70 off in cart) for <a href="https://www.jdoqocy.com/click-1989299-11911660?sid=dd---&amp;url=https%3A%2F%2Feshop.macsales.com%2Fitem%2FOWC%2FTB3DK14PSG%2F" rel="sponsored" target="_blank">$179.99 at OWC</a></li><li> Lenovo 16&quot; Legion Pro 7i Gaming Laptop, Onyx Gray (normally $2,749.99, save $600.99) for <a href="https://www.bhphotovideo.com/c/product/1745683-REG/lenovo_82wq002rus_16_legion_pro_7.html/BI/1717/KBID/2301/SID/dd---" rel="sponsored" target="_blank">$2,149 at B&amp;H</a></li><li> Baseus Laptop Docking Station Dual Monitor, 9 in 1 USB C Hub (normally $69.99, 34% off + 15% off on page coupon) for <a href="https://www.amazon.com/gp/product/B0B1PT5FVM?tag=aidailydeals-20" rel="sponsored" target="_blank">$39.09 at Amazon</a></li><li> Asus Tri-band WiFi 6E Extendable Router, 6GHz Band, 2.5G Port, Advanced Parental Control, Built-in VPN, AiMesh Compatible (normally $279.99, 18% off) for <a href="https://www.amazon.com/gp/product/B0BLGGN4Z9?tag=aidailydeals-20" rel="sponsored" target="_blank">$229.99 at Amazon</a></li><li> Samsung Galaxy Tab S7+ Tablet (normally $699.99, 36% off) for <a href="https://www.dpbolvw.net/click-1989299-13142085?sid=dd---&amp;url=https%3A%2F%2Fcomputers.woot.com%2Fplus%2Fsamsung-galaxy-tab-s7-tablet" rel="sponsored" target="_blank">$449.99 at Woot</a></li><li> Echo Show 5, 3rd Gen + Charcoal Ring Video Doorbell Bundle (normally $189.98, save $124.99) for <a href="https://shop-links.co/1815812227644664025?u1=dd---" rel="sponsored" target="_blank">$64.99 at Best Buy</a> </li></ul></div><div class="col-sm-12"><h2 data-anchor="plus-save-with-even-more-deals" id="plus-save-with-even-more-deals">另外，享受更多优惠，节省更多</h2></div><div class="col-sm-12"><div class="align-center"><a href="https://prices.appleinsider.com/"><img src="https://photos5.appleinsider.com/gallery/47002-91572-Apple-Price-Guide-hero-graphic-xl.jpg" alt="最优惠的苹果价格" height="720" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div></div><div class="col-sm-12"><p>从新款 MacBook Air 15 英寸到 M2 Mac mini， <em>AppleInsider</em>读者可以抢购更多 Apple 硬件的独家折扣。请务必访问我们的<a href="https://prices.appleinsider.com/">Apple 价格指南</a>，了解 Apple 经销商的最新销售和特别优惠。</p></div><div class="col-sm-12"><ul><li> <strong><a href="https://appleinsider.com/articles/23/08/02/apples-13-inch-m2-macbook-air-is-on-sale-for-949-just-in-time-for-back-to-school">Apple&#39;s 13-inch M2 MacBook Air is on sale for $949 in latest back-to-school deal</a></strong></li><li> <strong><a href="https://appleinsider.com/articles/23/08/03/exclusive-macbook-pro-14-16-inch-deals-save-up-to-1300-prices-start-at-1549">Exclusive MacBook Pro 14 &amp; 16-inch deals: save up to $1,300, prices start at $1,549</a></strong></li><li> <strong><a href="https://appleinsider.com/articles/23/07/08/lowest-price-ever-macbook-pro-14-inch-with-32gb-ram-1tb-ssd-on-sale-for-1999-plus-60-off-applecare">Apple MacBook Pro 14 英寸（配备 32GB RAM、1TB SSD）售价 1,999 美元，还可享受 60 美元的 AppleCare 优惠</a></strong></li><li><strong><a href="https://appleinsider.com/articles/23/07/20/take-81-off-a-standalone-microsoft-office-2021-license-for-windows-or-mac">购买适用于 Windows 或 Mac 的独立 Microsoft Office 2021 许可证可节省 81%</a></strong></li></ul></div><p></p> ]]>;</description><pubDate> Sat, 05 Aug 2023 14:16:52 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/articles/23/08/05/daily-deals-17-off-bose-quietcomfort-earbuds-ii-600-off-m1-14-inch-macbook-pro-150-off- eero-三频-mesh-wi-fi-6e-系统</guid><link/>https://appleinsider.com/articles/23/08/05/daily-deals-17-off-bose-quietcomfort-earbuds-ii-600-off-m1-14-inch-macbook-pro-150-off- eero-三频-mesh-wi-fi-6e-系统<author><![CDATA[AppleInsider Staff]]></author></item><item><title><![CDATA[Apple Pay launches in Chile, Vietnam rumored for August 8]]></title><description><![CDATA[<p class="col-sm-12 article-lead">据报道称，苹果正准备在多个国家同时推出<a href="https://appleinsider.com/inside/apple-pay" title="苹果支付" data-kpt="1">Apple Pay</a> ，并可能于 8 月初在智利和越南进行扩张。</p><div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><p> Apple 已逐步扩大 Apple Pay 的适用范围，移动支付平台不断进入新市场。继七月<a href="https://appleinsider.com/articles/23/07/18/apple-pay-has-finally-arrived-in-morocco">在摩洛哥推出</a>后，它似乎终于可以进军智利和越南了。</p></div><div class="col-sm-12"><p> <a href="https://www.df.cl/mercados/banca-fintech/apple-pay-ad-portas-de-comenzar-operaciones-en-chile-de-la-mano-de">据</a><em>《金融日报》</em>报道，智利的银行间服务网络银行 Transbank 在社交媒体上发帖欢迎 Apple Pay 加入其网络。然而，该帖子已从视图中删除，大概是因为发布得太早。</p></div><div class="col-sm-12"><p>这远非银行或金融机构第一次在回溯之前确认 Apple Pay 已入站。例如， <a href="https://appleinsider.com/articles/22/08/08/malaysian-bank-scrambles-to-undo-early-apple-pay-launch">2022 年 8 月</a>，马来西亚大马银行在其网站上发布了一些页面，然后由于尚未正式宣布而匆忙将其删除。</p></div><div class="col-sm-12"><div class="primis-ad-wrap"></div></div><div class="col-sm-12"><p> 尽管社交帖子被删除，但智利人可能不会等太久就可以使用 Apple Pay。据记者 Pedro Segura Martin 报道，四家金融机构的<a href="https://twitter.com/pedro_segura/status/1686012061988352003">消息人士</a>称，此次推出将于<a href="https://twitter.com/pedro_segura/status/1686011718164422657">8 月 8 日</a>左右进行。</p></div><div class="col-sm-12"><p>智利并不是唯一一个将于该日期开始使用 Apple Pay 的国家。据连续爆料者“ShrimpApplePro”通过 Twitter 透露，一份将在越南支持 Apple Pay<a href="https://twitter.com/VNchocoTaco/status/1687612995352895489/photo/1">的公司名单</a>已经浮出水面，其中包括星巴克、麦当劳和 Booking.com。</p></div><div class="col-sm-12"><p>除了该支付平台的早期采用者名单之外，Shrimp 还坚称<a href="https://twitter.com/VNchocoTaco/status/1687696395841708032">8 月 8 日</a>的发布日期是准确的。</p></div><div class="col-sm-12"><p> 7 月份的其他报告（<a href="https://vir.com.vn/apple-pay-set-to-launch-in-vietnam-103626.html">例如</a><em>《越南投资评论》）</em>证实，多家银行正在努力为其服务实施 Apple Pay 支持。</p></div><div class="col-sm-12"><p>截至本文发布时，支持 Apple Pay 的国家/地区的<a href="https://support.apple.com/en-us/HT207957">官方名单</a>不包括智利和越南。</p></div><p></p> ]]>;</description><pubDate> Sat, 05 Aug 2023 13:13:08 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/articles/23/08/05/apple-pay-launches-in-chile-vietnam-rumored-for-august-8</guid><link/> https://appleinsider.com/articles/23/08/05/apple-pay-launches-in-chile-vietnam-rumored-for-august-8 <author><![CDATA[Malcolm Owen]]></author></item><item><title><![CDATA[India delays iPad and Mac import limits until October 31]]></title><description><![CDATA[<div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><p>周四，包括苹果、戴尔、惠普和三星在内的主要设备供应商不得不应对旨在限制印度本地生产产品进口的<a href="https://appleinsider.com/articles/23/08/03/india-limits-ipad-and-mac-imports-in-drive-to-boost-local-manufacturing">新规定</a>。截至周五，工商部表示，这些规定在三个月内不会真正生效。</p></div><div class="col-sm-12"><p>据<em>TechCrunch</em><a href="https://techcrunch.com/2023/08/04/india-delays-laptop-import-restrictions-order/">报道</a>，IT 副部长拉吉夫·钱德拉塞卡 (Rajeev Chandrasekhar) 周五表示，新政策实施之前将有一个“过渡期”。在周四介绍这些规则时，商务部曾表示，这些限制措施将立即实施。</p></div><div class="col-sm-12"><p>根据周四的命令，设备供应商必须申请许可证才能将硬件进口到印度，例如苹果的 iPad 或<a href="https://appleinsider.com/inside/macbook-pro" title="MacBook Pro" data-kpt="1">MacBook Pro</a> 。虽然硬件生产商期待某种形式的进口措施，但突然出台和初步实施让这些公司措手不及，迫使他们立即<a href="https://appleinsider.com/articles/23/08/04/apple-forced-to-halt-macbook-ipad-imports-in-india">停止进口</a>。</p></div><div class="col-sm-12"><div class="primis-ad-wrap"></div></div><div class="col-sm-12"><p> 这种突然性还可能严重影响通常利润丰厚的返校购物季和排灯节季节性销售期间的销售。</p></div><div class="col-sm-12"><p>现已推迟的进口规定将于 10 月 31 日生效，让苹果和其他主要进口商有更多时间做好准备。这可能采取增加<a href="https://appleinsider.com/articles/23/08/01/foxconn-plans-new-500-million-investment-in-india">本地硬件生产</a>的形式，苹果已经在该国逐步为其部分产品线做到了这一点。</p></div><div class="col-sm-12"><p>钱德拉塞卡在推特上表示：“政府的目标是确保硬件和系统值得信赖，减少进口依赖并增加此类产品的国内制造。” “这是关于监管进口，以确保可信和可验证的系统，并确保印度科技生态系统仅使用进口和/或国内制造的可信系统/产品的可信和经过验证的系统。”</p></div><div class="col-sm-12"><p>还向旅客做出了澄清，这些限制不适用于在行李中携带受影响硬件的旅客。</p></div><p></p> ]]>;</description><pubDate> Sat, 05 Aug 2023 11:48:10 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/articles/23/08/05/india-delays-ipad-and-mac-import-limits-until-october-31</guid><link/> https://appleinsider.com/articles/23/08/05/india-delays-ipad-and-mac-import-limits-until-october-31<author><![CDATA[Malcolm Owen]]></author></item></channel></rss>
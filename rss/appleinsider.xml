<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title><![CDATA[Apple News, Rumors, Reviews, Prices & Deals | AppleInsider]]></title><link/> https://appleinsider.com<atom:link href="https://rsshub.app/appleinsider" rel="self" type="application/rss+xml"></atom:link><description><![CDATA[Apple News, Rumors, Reviews, Prices & Deals | AppleInsider - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]></description><generator> RS集线器</generator><webmaster>i@diygod.me (DIYgod)</webmaster><language> zh-cn</language><lastbuilddate> 2023 年 8 月 7 日星期一 13:45:33 GMT</lastbuilddate><ttl> 120 </ttl><item><title><![CDATA[Profits are still down but Foxconn expects bump from iPhone 15]]></title><description><![CDATA[<div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><p>富士康公布的 2023 年 1 月至 3 月第一季度数据显示，利润较去年同期下降 56%。这是该公司三年来<a href="https://appleinsider.com/articles/23/05/11/foxconn-has-a-grim-outlook-for-the-year-as-profits-take-a-nosedive">最大的季度跌幅</a>。</p></div><div class="col-sm-12"><p>现在据<em>路透社报道</em>，富士康公布了2023年7月的数据，仍低于上年同期，但仅下降了1.23%。收入较 2023 年 6 月增长近 11%，达到 148.2 亿美元。</p></div><div class="col-sm-12"><p>此前，7 月公布的 2023 年 4 月至 5 月至 6 月季度业绩同比下降 13.3%。</p></div><div class="col-sm-12"><div class="primis-ad-wrap"></div></div><div class="col-sm-12"><p> 尽管如此，该公司表示预计会出现反弹。</p></div><div class="col-sm-12"><p>富士康母公司鸿海精密工业股份有限公司在一份声明中表示，“随着下半年旺季的到来，运营将逐渐加快。” “第三季度的前景将好于第二季度，预计季度增长速度将高于前两年。”</p></div><div class="col-sm-12"><p>富士康还表示，这一最新数字是 7 月份的第二高数字。它将增长归因于苹果和其他供应商准备推出<a href="https://appleinsider.com/inside/iphone-15" title="iPhone 15" data-kpt="1">iPhone 15</a>系列等产品。</p></div><p></p> ]]>;</description><pubDate> Mon, 07 Aug 2023 13:40:24 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/articles/23/08/07/profits-are-still-down-but-foxconn-expects-bump-from-iphone-15</guid><link/> https://appleinsider.com/articles/23/08/07/profits-are-still-down-but-foxconn-expects-bump-from-iphone-15 <author><![CDATA[William Gallagher]]></author></item><item><title><![CDATA[Hyper fields HyperDrive Next collection of a dock, SSD enclosure, and hubs]]></title><description><![CDATA[<div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><p>该公司表示，周一推出的 HyperDrive Next 系列通过将创造力与创新和环境责任相结合，“证明了我们致力于突破界限”。</p></div><div class="col-sm-12"><p>该系列包括四种产品，即精选的 USB-C 集线器、USB4 NVMe SSD 外壳、针对 M1 和 m2 Mac 的支持双显示器的 USB-C 扩展坞，以及 USB-C 商务级扩展坞。</p></div><div class="col-sm-12"><p> USB-C 集线器提供 4 到 11 个端口，承诺通过 10Gb USB 传输将速度提高一倍，通过 SD 4.0 312Mbs 端口将数据传输速率提高三倍，通过 140W PD 3.1 端口将直通功率提高 40%。这些集线器还支持 4K60Hz HDMI 连接，由 100% 再生铝和 85% 再生塑料制成。</p></div><div class="col-sm-12"><div class="primis-ad-wrap"></div></div><div class="col-sm-12"><p> HyperDrive Next USB4 NVMe SSD 机箱可在直接从 SSD 工作的同时实现高达 40Gbps 的数据传输。该外壳同样由 100% 再生铝制成，具有 IP55 防水防尘等级，可与容量高达 16TB 的 M.2 NVMe SSD 兼容。</p></div><div class="col-sm-12"><p> Hyper 正在<a href="https://click.linksynergy.com/deeplink?id=SnlbqrT3b2s&amp;mid=43456&amp;u1=pa---&amp;murl=https%3A%2F%2Fwww.hypershop.com%2Fproducts%2Fhyperdrive-next-usb4-nvme-ssd-enclosure" rel="sponsored">以 119.99 美元的价格</a>出售 HyperDrive Next USB4 NVMe SSD 外壳。</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55766-113300-hyper-enclosure-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55766-113300-hyper-enclosure-xl.jpg" alt="HyperDrive Next USB4 NVMe SSD 机箱" height="731" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div></div><div class="col-sm-12"><p>继<a href="https://appleinsider.com/articles/22/03/07/hypers-hyperdrive-10-in-1-usb-c-hub-review-use-two-4k-displays-with-your-m1-mac">HyperDrive 10 合 1 USB-C 集线器</a>之后，HyperDrive Next 10 端口商务级 USB-C 扩展坞支持双 4K 显示器，其中包括 10Gbps USB 端口、支持存储卡数据传输的 SD 4.0，以及可拆卸的 USB-C 电缆。它还采用纤薄设计，便于携带，并且由 85% 的再生塑料制成。</p></div><div class="col-sm-12"><p>最后，HyperDrive Next Duak 4K HDMI 7 端口 USB-C 集线器为 M1 和 M2 MacBook 提供双 4K 显示器支持，超越了 Apple 的限制。同样，它还有用于快速数据传输的 10Gbps USB 端口、100W PD 电源直通端口，并且由 85% 的再生塑料制成。</p></div><div class="col-sm-12"><p>除了可从 Hyper 的在线<a href="https://click.linksynergy.com/deeplink?id=SnlbqrT3b2s&amp;mid=43456&amp;u1=pa---&amp;murl=https%3A%2F%2Fwww.hypershop.com%2Fpages%2Fgo-beyond" rel="sponsored">店面</a>购买外，其许多集线器和扩展坞也将于 8 月中旬在百思买 (Best Buy) 上销售。</p></div><p></p> ]]>;</description><pubDate> Mon, 07 Aug 2023 12:51:01 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/articles/23/08/07/hyper-fields-hyperdrive-next-collection-of-a-dock-ssd-enclosure-and-hubs</guid><link/> https://appleinsider.com/articles/23/08/07/hyper-fields-hyperdrive-next-collection-of-a-dock-ssd-enclosure-and-hubs <author><![CDATA[Malcolm Owen]]></author></item><item><title><![CDATA[Apple could raise iPhone 15 Pro storage to 2TB]]></title><description><![CDATA[<p class="col-sm-12 article-lead"> <a href="https://appleinsider.com/inside/iphone-15" title="iPhone 15" data-kpt="1">iPhone 15</a> Pro 可以为潜在买家提供更多的使用空间，有传言称苹果可能会将最大存储容量提高到 2TB。</p><div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><p>苹果目前销售的<a href="https://appleinsider.com/inside/iphone-14-pro" title="iPhone 14 专业版" data-kpt="1">iPhone 14 Pro</a>和 iPhone 14 Pro Max 有四种容量可供选择，从 128GB 到 1TB。对于秋季产品阵容，苹果可能会更进一步。</p></div><div class="col-sm-12"><p>在 Naver 上的一篇帖子中，连续爆料者“Yeux1122”<a href="https://m.blog.naver.com/yeux1122/223175715389">声称</a>iPhone 15 Pro 和 iPhone 15 Pro Max 机型将在 2023 年提供 2 TB 选项。除了来自供应商的消息外，爆料者没有提供任何其他细节。</p></div><div class="col-sm-12"><p>虽然有关扩展存储空间的传言尚未流传，但有人提议苹果可能会<a href="https://appleinsider.com/articles/23/07/27/iphone-15-pro-again-rumored-to-cost-more-than-ever-before">提高 Pro 型号的成本</a>。除了<a href="https://appleinsider.com/articles/23/07/10/iphone-15-and-iphone-15-pro-what-the-rumors-say-is-landing-this-fall">预期的价格上涨</a>之外，存储容量的增加可能有助于鼓励消费者为他们的设备支付更多费用。</p></div><div class="col-sm-12"><div class="primis-ad-wrap"></div></div><div class="col-sm-12"><p> 对于一些用户，尤其是摄像师和创意人员来说，在拍摄大量 4K 素材时，额外的容量会受到欢迎。虽然 1TB 对于大多数用户来说已经很大了，但视频是一种消耗量很大的文件类型，一些用户可能会认为额外的 TB 是合理的。</p></div><p></p> ]]>;</description><pubDate> Mon, 07 Aug 2023 11:57:58 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/articles/23/08/07/apple-could-raise-iphone-15-pro-storage-to-2tb</guid><link/> https://appleinsider.com/articles/23/08/07/apple-could-raise-iphone-15-pro-storage-to-2tb <author><![CDATA[Malcolm Owen]]></author></item><item><title><![CDATA['Ted Lasso' VFX compositing supervisor talks crowd effects at event]]></title><description><![CDATA[<div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><p>周日， <a href="https://appleinsider.com/inside/apple-tv-plus" title="苹果电视+" data-kpt="1">Apple TV+</a>和<em>Deadline</em>举办了首届<a href="https://appleinsider.com/articles/23/08/05/vfx-behind-apple-tv-shows-revealed-in-special-event-on-sunday">Visual Effects + Screen</a>活动，展示了 Apple TV+ 某些节目的数字特效方面的一些工作。</p></div><div class="col-sm-12"><p><em>据 Deadline</em> <a href="https://deadline.com/2023/08/bill-parker-ted-lasso-vfx-compositing-supervisor-visual-effects-screen-1235456041/">报道</a>，在谈到“Ted Lasso”时，视觉特效合成主管 Bill Parker 解释说，该剧的一大亮点是让足球场充满了支持者。然而，虽然在视觉特效项目中制造人群很常见，但帕克表示，“需要完成的镜头数量和数量”使“特德·拉索”与众不同。</p></div><div class="col-sm-12"><p> “当你观看我们制作的任何一集时，你会看到两种不同的东西，”帕克解释道。 “要么根本没有体育场，里面都是空的，要么他们有时会在真正的体育场上进行防空洞投篮，而我们只是在座位上增加人。”</p></div><div class="col-sm-12"><div class="primis-ad-wrap"></div></div><div class="col-sm-12"><p> 团队必须想出一种“非常强大的方法，能够根据我们所拍摄的镜头来改变技术”，部分原因是第三个赛季使用了一千多个镜头。使用多种“人群技术”，例如创建瓷砖板和精灵，甚至制作计算机生成的人群，体育场可靠地充满了数字临时演员。</p></div><div class="col-sm-12"><p>帕克还观察到，与其他人相比，足球观众可能相当反动。 “每个人都非常投入，所以这也成为工作的重要组成部分，”他解释道，并且他“真正地调动了这些情绪”以匹配球场上的动作。</p></div><div class="col-sm-12"><p>帕克在《泰德·拉索》中的作品获得了<a href="https://appleinsider.com/articles/23/07/12/apple-tv-gains-51-emmy-awards-led-once-more-by-ted-lasso">艾美奖提名</a>，其中《妈妈城市》一集让他在单集杰出视觉效果类别中占有一席之地。</p></div><div class="col-sm-12"><p>出席的还有《纪念阵亡五日》的埃里克·杜斯特、《基地》的克里斯·麦克莱恩和《筒仓》的丹尼尔·劳赫韦格。</p></div><p></p> ]]>;</description><pubDate> Mon, 07 Aug 2023 10:53:54 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/articles/23/08/07/ted-lasso-vfx-compositing-supervisor-talks-crowd-effects-at-event</guid><link/> https://appleinsider.com/articles/23/08/07/ted-lasso-vfx-compositing-supervisor-talks-crowd-effects-at-event <author><![CDATA[Malcolm Owen]]></author></item><item><title><![CDATA[The cheesegrater Mac Pro could still be the best Mac ever made]]></title><description><![CDATA[<div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><p>最新的 Mac Pro 是最后一款从 Intel 处理器过渡到 Apple Silicon 的 Mac。但正是在苹果公司进行之前的巨大转型（从 PowerPC 转向英特尔）时，初代 Mac Pro 才首次问世。</p></div><div class="col-sm-12"><p>但就像现在一样，Mac Pro 向新处理器的过渡花费的时间比用户希望的要长。 </p></div><div class="col-sm-12"><h2 data-anchor="intel-promised-unimaginable-speed" id="intel-promised-unimaginable-speed">英特尔承诺超乎想象的速度</h2></div><div class="col-sm-12"><p>Mac Pro 发布前两年，即 2005 年 6 月 6 日，<a href="https://appleinsider.com/inside/steve-jobs">史蒂夫·乔布斯</a>正式透露，长期以来的传言是真的，苹果将在 Mac 上改用英特尔处理器。那一年，他详细介绍了公司的路线图。 </p></div><div class="col-sm-12 embed"><div class="align-center"><div class="embed-responsive embed-responsive-16by9 video-holder"><iframe src="https://www.youtube.com/embed/ghdTqnYnFyg" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen="" class="embed-responsive-item" loading="lazy" referrerpolicy="no-referrer"></iframe></div></div></div><div class="col-sm-12"><p>他在 2005 年 WWDC 上表示：“从明年开始，我们将开始推出配备英特尔处理器的 Mac。因此，当我们明年这个时候再次见面时，我们的计划是届时推出配备英特尔处理器的 Mac。”</p></div><div class="col-sm-12"><p> “当我们两年后再次在这里聚会时，我们的计划是过渡将基本完成，”他继续说道。 “我们认为它将在 2007 年底完成。所以这是一个为期两年的过渡。”</p></div><div class="col-sm-12"><p>这是苹果公司迄今为止最清楚的说法，如果乔布斯对这一转变的解释听起来很熟悉的话，那就应该如此。<a href="https://appleinsider.com/inside/tim-cook">蒂姆·库克 (Tim Cook)</a>在宣布迁移到 Apple Silicon 时遵循了<a href="https://appleinsider.com/articles/20/06/29/tim-cook-apple-silicon-transition-follows-steve-jobs-intel-shift-script">完全相同的策略</a>。</p></div><div class="col-sm-12"><p>当时和现在一样的大新闻是，该系列中的每台 Mac 都将配备英特尔处理器，这显然是件好事，但乔布斯特别承诺更快、更强大的机器。最需要电力的地方就是后来的 Mac Pro。</p></div><div class="col-sm-12"><p>在英特尔转型之初，我们并不知道这个名字，但我们确实知道它的形式，因为已经有一款名为 Power Mac G5 的顶级 PowerPC 型号采用相同的机箱。</p></div><div class="col-sm-12"><p>乔布斯给出的从 PowerPC 转向英特尔的原因之一显然与该机器及其开发有关。站在一张显示 PowerMac G5 的幻灯片前，上面写着“3.0GHz？”乔布斯有很多话要说。</p></div><div class="col-sm-12"><p> “两年前我站在这里，我向你保证了这一点，”乔布斯指着屏幕说道。 “我们还无法将其交付给您。”</p></div><div class="col-sm-12"><p> “展望未来，我们可以设想一些我们想要为您构建的令人惊叹的产品，”他继续说道，“但我们不知道如何根据未来的 PowerPC 路线图来构建它们。”</p></div><div class="col-sm-12"><p> Power Mac G5 很受欢迎，因为它是当时功能最强大的 Mac，但要创造成功，需要比性能更难以定义的东西，而这款机器从来没有像 Mac Pro 那样受到纯粹的喜爱。</p></div><div class="col-sm-12"><p>因此，尽管有很多希望和期待，但直到 2006 年 8 月 7 日星期一东部时间下午 1:08，Mac Pro 才发布，并开始走上成为受人喜爱的经典之路。</p></div><div class="col-sm-12"><p> “[2006 年] 的前两个季度，我们几乎将所有产品都转向了英特尔。除了 Power Mac 之外，”乔布斯当时宣称。 “好吧，今天 Power Mac 将消失在历史之中。” </p></div><div class="col-sm-12 embed"><div class="align-center"><div class="embed-responsive embed-responsive-16by9 video-holder"><iframe src="https://www.youtube.com/embed/l72MsGZQA8Q" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen="" class="embed-responsive-item" loading="lazy" referrerpolicy="no-referrer"></iframe></div></div></div><div class="col-sm-12"><p><a href="https://appleinsider.com/inside/phil-schiller">菲尔·席勒</a>随后上台展示了与之前<a href="https://appleinsider.com/articles/06/07/14/apples_mac_pro_to_sport_modified_power_mac_enclosure">完全相同</a>的机器。</p></div><div class="col-sm-12"><p>也许这在今天看来并不令人惊讶，因为苹果硅 Mac 花了一代人的时间才摆脱了前辈的底盘。但回到 2006 年，看到同样的大型铝制外壳、同样的提手手柄以及同样方便进入内部的情况，真是令人惊讶。</p></div><div class="col-sm-12"><p>席勒很快就为它辩护，这足以令人惊讶。</p></div><div class="col-sm-12"><p> “我们拥有业内最好的外壳，这是一个漂亮的外壳设计，”他说。 “从外观上看，它拥有以前的所有优点。从内部看，它是全新的。”</p></div><div class="col-sm-12"><h2 data-anchor="performance-promise" id="performance-promise">性能承诺</h2></div><div class="col-sm-12"><p>这第一台 Mac Pro 确实达到了乔布斯承诺的 3.0GHz 性能，而且它采用了英特尔的 Xeon 处理器。</p></div><div class="col-sm-12"><p> “这是我们许多高端客户所梦想的 Mac，”席勒说道。 “对于我们的最高端客户来说，这是他们真正想要的功能：它们是 64 位的。”</p></div><div class="col-sm-12"><p> “因此，这款新的英特尔至强芯片是一款令人惊叹的处理器，可以放入我们的产品中，但在每台 Mac Pro 中，我们将放入两个处理器，”他继续说道。 “所有 Mac Pro 均具有四核 Xeon 性能。这些都是速度惊人的机器。”</p></div><div class="col-sm-12"><p>似乎每一台新 Mac 都是 Apple 有史以来最快的 Mac，但<a href="https://appleinsider.com/articles/06/08/07/apple_unveils_quad_core_64_bit_mac_pro_desktops">这款 Mac</a>却实现了巨大飞跃，据称其性能比 Power Mac G5 提高了一倍。也许直到 Apple Silicon 的推出，速度才出现了如此显着的提升。</p></div><div class="col-sm-12"><p>这款 Mac Pro 还提高了每瓦功率的性能。通常，当您构建笔记本电脑并平衡工作和电池寿命的需求时，这是一个问题，但席勒指出，这对于这款台式机也有很大的好处。</p></div><div class="col-sm-12"><p> “每瓦性能意味着我们在机箱内需要更少的冷却系统。这意味着我们可以利用我们拥有的空间做更多事情，”他说。 “因此，我们将 Mac Pro 内的驱动器数量增加了一倍，现在有四个硬盘，内部存储容量高达 2TB。”</p></div><div class="col-sm-12"><p>现在还有第二个光驱，以及连接更多外部设备的空间，位于机器的背面 - 现在也位于前面。</p></div><div class="col-sm-12"><p>正面增加了第二个 USB 2.0 端口和 Firewire 800，而背面最显着的变化是双宽显卡插槽，允许安装最大、最强大的 GPU，而无需牺牲相邻插槽。</p></div><div class="col-sm-12"><p>因此，新款 Mac Pro 的速度“快得让人尖叫”，它具有更大的扩展性，但扩展的方式仍然是同样令人羡慕的简单方式。该外壳让您只需打开整个侧面，然后就可以插入新的硬盘驱动器，而无需任何布线或摆弄。</p></div><div class="col-sm-12"><p>这款 Mac Pro 可深度定制，速度极快，配备 1GB RAM，但可以处理 32GB RAM，Schiller 宣布它现已上市。</p></div><div class="col-sm-12"><p> 2006 年 8 月 7 日，您可以花 2,499 美元购买一台。以 2023 年的价格计算，这大约是 3,677 美元，大约是当今 Mac Pro 成本的一半。</p></div><div class="col-sm-12"><h2 data-anchor="not-standing-still" id="not-standing-still">没有站着不动</h2></div><div class="col-sm-12"><p>这款最初的 Mac Pro（版本 1,1）一直在销售，直到 2007 年 4 月才出现减速。然后版本 2,1 一直持续到第二年 1 月，当时 3,1 版本通过更快的四核 Intel Xeon 5400 处理器提升了性能。您还可以将其升级为拥有两个这样的处理器以及高达 32GB 的 RAM。</p></div><div class="col-sm-12"><p>另一个重大更新是在 2010 年 7 月，除了迁移到 Intel 的 Xeon 5600 系列处理器外，您现在还可以拥有高达 64GB RAM 和 8TB 存储空间。</p></div><div class="col-sm-12"><p>这个版本一直是苹果的旗舰机型，直到这面旗帜摇摇欲坠。两年后，Mac Pro 再次更新，2012 年 7 月发布的 Mac Pro 现在配备了两个 6 核 2.4 GHz Intel Xeon Westmere-EP 处理器。</p></div><div class="col-sm-12"><p>从外面看，它还是一模一样，这很好，但里面现在看起来也很旧了。它正在更新，但内部不再有根本性的改进，因此苹果的专业用户开始叫嚣。</p></div><div class="col-sm-12"><p>苹果似乎正在对其专业用户失去兴趣。看起来苹果甚至可能已经失去了生产创新 Mac 的著名能力。 </p></div><div class="col-sm-12"><h2 data-anchor="the-difficult-second-album" id="the-difficult-second-album">困难的第二张专辑</h2></div><div class="col-sm-12"><p>即使在设备快速发展的技术领域，也很难取得成功。奶酪刨丝机 Mac Pro 已经问世几年了，苹果可以而且需要对其进行彻底改造，以利用更新的技术。</p></div><div class="col-sm-12"><p>这正是苹果所做的，最初，这款经过改进的新款 Mac Pro 似乎非常出色。但它并没有保持这种状态，但在 WWDC 2013 上，当苹果公司<a href="https://appleinsider.com/articles/13/06/10/apple-offers-sneak-peek-at-new-cylindrical-mac-pro-assembled-in-the-usa">先睹为快</a>时，我们都为菲尔·席勒 (Phil Schiller) 的台词鼓掌，“不能创新，我的屁股。”</p></div><div class="col-sm-12"><p>然而，与奶酪刨丝机 Mac Pro 不同的是，他无法透露这曾经是苹果发布的主要内容。他不能随便说新款 Mac Pro 今天发货了。</p></div><div class="col-sm-12"><p>甚至还差得很远。</p></div><div class="col-sm-12"><p>相反，席勒透露该产品将在当年晚些时候发货，而且确实在 2013 年 12 月 19 日发货，但只是勉强发货。 </p></div><div class="col-sm-12 embed"><div class="align-center"><div class="embed-responsive embed-responsive-16by9 video-holder"><iframe src="https://www.youtube.com/embed/ujvZJxn4mvo" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen="" class="embed-responsive-item" loading="lazy" referrerpolicy="no-referrer"></iframe></div></div></div><div class="col-sm-12"><p>这款 2013 款 Mac Pro 是近十年来第一款没有采用自 2004 年 6 月 Power Mac G5 以来“漂亮外壳”的产品。</p></div><div class="col-sm-12"><p>这是一个新的外壳，看起来确实很漂亮，而且令人惊讶的是，它的外形比它的前身更小。 2013 款 Mac Pro 的高度为 9.9 英寸，而奶酪刨丝器型号的高度为 20.1 英寸，是其两倍多一点。</p></div><div class="col-sm-12"><p>奶酪刨丝器型号也为 8.1 英寸宽、18.7 英寸深，而新型号为圆形，直径为 6.6 英寸。因此，无论百分比差异如何，相比之下，2013 年 Mac Pro 看起来就像一个小垃圾桶。</p></div><div class="col-sm-12"><p>它很小，但令人印象深刻——但不幸的是它有缺陷。</p></div><div class="col-sm-12"><p>虽然专业用户立即批评其缺乏可扩展性和模块化，但随着时间的推移，人们发现它存在一个根本性的弱点。</p></div><div class="col-sm-12"><p>这种令人印象深刻的新设计由于其“热角”而在负载下崩溃。由于通风不足，它的运行速度受到了限制。</p></div><div class="col-sm-12"><p>这一点很明显，但在发布时，<a href="https://appleinsider.com/articles/14/01/09/review-apples-redesigned-late-2013-mac-pro">第一批评论</a>都非常积极，尽管他们抱怨 2013 Mac Pro 缺乏升级选项。</p></div><div class="col-sm-12"><p>然而，由于存在这些性能瓶颈，2013 年 Mac Pro 并不是人们想要的 2006 年 Mac Pro 的真正继承者。尽管它看起来确实很棒。</p></div><div class="col-sm-12"><p> 2013 年 Mac Pro 发布时的售价为 2,999 美元（现在为 3927 美元），事后看来，它是失败的 - 但只是事后看来。即使它没有像 2006 年的 Mac Pro 那样成为绝对的最爱，它仍然有它的粉丝——这不是通风双关语——视频编辑套件开始依赖它。 </p></div><div class="col-sm-12"><h2 data-anchor="apple-took-its-eye-off-the-ball" id="apple-took-its-eye-off-the-ball">苹果把目光从球上移开</h2></div><div class="col-sm-12"><p>我们永远不会真正知道苹果在英特尔时代的剩余时间里如何看待 Mac Pro，但它永远不会像 iPhone 那样成为疯狂的畅销品。发布后不久，甚至有迹象表明苹果已经忘记了 2013 年 Mac Pro。</p></div><div class="col-sm-12"><p>例如，2014 年就没有任何更新。</p></div><div class="col-sm-12"><p> 2015 年也没有。</p></div><div class="col-sm-12"><p>事实上，直到 2017 年，苹果才对圆柱形 Mac Pro 采取任何行动，然后宣布其死亡。</p></div><div class="col-sm-12"><p>苹果将​​继续销售同样的、一模一样的 Mac Pro 直到 2019 年，但销售变得越来越困难，因为它一直存在同样的问题，而且它的老化情况也不好。此外，苹果公司还采取了当时几乎闻所未闻的举措，承诺即将推出一款经过彻底改进的 Mac Pro。</p></div><div class="col-sm-12"><p>苹果也在 2017 年推出了<a href="https://appleinsider.com/inside/imac-pro">iMac Pro</a> 。对于许多用户来说，iMac Pro 与 2013 年的 Mac Pro 成功地进行了正面交锋，就像 2023 年的 Mac Studio 和 Mac Pro 势均力敌一样。</p></div><div class="col-sm-12"><p>苹果并没有说从 2017 年的新闻发布到 2019 年的发布要等这么久，但很明显，苹果确实明确指出，新款 Mac Pro 不会在 2017 年推出。</p></div><div class="col-sm-12"><p>只是，人们对这款新机的渴望如此强烈，以至于无数文章选择将其解读为它肯定会在 2018 年上市。这确实是一厢情愿地无视苹果公司异常简单的声明。</p></div><div class="col-sm-12"><p>虽然承诺的甚至只是传闻中的新苹果设备总是会受到关注，但 Mac Pro 的观众一直是热情的。毫无疑问，它的受众比任何其他 Mac 都要小得多，但成本可能也是受众的一个因素，但它远不是唯一的因素。</p></div><div class="col-sm-12"><p>相反，这些受众愿意付出高昂的购买价格来购买真正强大的 Mac Pro，因为它的工作流程明显加快，计算量大的任务的周转速度也明显加快。</p></div><div class="col-sm-12"><p>不管苹果是否真的忘记了这群观众，它肯定从 2013 年的 Mac Pro 中学到了这一点：这群观众不是注重成本而是渴望利益的。</p></div><div class="col-sm-12"><p>不过，用户的支出是有限的，当苹果推出 2019 年 Mac Pro 时，苹果就在大力推动这一举措。</p></div><div class="col-sm-12"><h2 data-anchor="mac-pro-2019" id="mac-pro-2019"> Mac Pro 2019</h2></div><div class="col-sm-12"><p> 2019 年 12 月 10 日发布时，2019 款 Mac Pro 起价为 5,999 美元，随后价格一路上涨。最大版本的<a href="https://appleinsider.com/articles/19/12/10/a-maxed-out-mac-pro-will-cost-you-53000----without-display">售价为 53,000 美元</a>——而且还是没有显示屏的版本。</p></div><div class="col-sm-12"><p>目标受众<a href="https://appleinsider.com/articles/19/06/14/high-end-users-on-why-im-buying-the-new-mac-pro">并不是非常关心</a>价格——同样，他们也没有对此欣喜若狂，但在他们的用例中，这是一项值得的投资。但几乎每个人都嘲笑苹果如何<a href="https://appleinsider.com/articles/20/04/15/apples-mac-pro-wheels-cost-699-and-the-feet-run-299">以 699 美元的价格</a>向你出售一套 Mac Pro 轮子。</p></div><div class="col-sm-12"><p>尽管如此，当时看来这实际上是完美的 Mac Pro。也许它甚至可以继承 2006 年初代 Mac Pro 等深受喜爱的产品的衣钵，但它没有。</p></div><div class="col-sm-12"><p>不可能。 </p></div><div class="col-sm-12 embed"><div class="align-center"><div class="embed-responsive embed-responsive-16by9 video-holder"><iframe src="https://www.youtube.com/embed/GEZhD3J89ZE?start=5162" title="YouTube 视频播放器" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" class="embed-responsive-item" loading="lazy" referrerpolicy="no-referrer"></iframe></div></div></div><div class="col-sm-12"><div class="align-center"><em><a href="https://www.youtube.com/c/appleinsider?sub_confirmation=1">在 YouTube 上订阅 AppleInsider</a></em></div></div><div class="col-sm-12"><p>六个月零 12 天后的<a href="https://appleinsider.com/articles/20/06/22/apple-ceo-tim-cook-announces-shift-to-apple-silicon">2020 年 6 月</a>，苹果宣布过渡到 Apple Silicon。尽管没有透露任何细节，但我们再次承诺大幅提高性能。</p></div><div class="col-sm-12"><p>然后我们开始获取细节，这些细节几乎就是苹果所声称的。这与 2017 年 iMac Pro 经常击败当时的 Mac Pro 时不太一样，但第一代 Apple Silicon 只是一个小<a href="https://appleinsider.com/inside/mac-mini">Mac mini</a> ，这是一个惊人的飞跃。</p></div><div class="col-sm-12"><p> Apple Silicon 显然正在发挥作用，它从根本上提高了性能，而且成本远低于 2019 年英特尔 Mac Pro。</p></div><div class="col-sm-12"><p>只要你有一个非常非常好的用例——或者有其他人付钱——才能让购买 2019 年 Mac Pro 成为正确的选择，就足够了。</p></div><div class="col-sm-12"><p>你不能在等待苹果的同时推迟你的工作，所以仍然有人认为这是一个明智的选择，尽管价格昂贵。但销量肯定有所下降，尤其是当人们确信 Mac Pro 将成为 Apple Silicon 的巅峰之作，而且它可能很快就会面世时。</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/54780-110869-Mac-Pro-table-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/54780-110869-Mac-Pro-table-xl.jpg" alt="Apple Silicon Mac Pro 在 WWDC 上" height="738" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a> </div></div><div class="col-sm-12"><h2 data-anchor="completing-the-transition-to-apple-silicon" id="completing-the-transition-to-apple-silicon">完成向 Apple Silicon 的过渡</h2></div><div class="col-sm-12"><p>当苹果公司成功地完成了从英特尔到苹果芯片的令人震惊的复杂过渡时，指出这一点似乎有些无礼，但它并没有在自己的最后期限前完成。蒂姆·库克 (Tim Cook) 表示，这需要两年时间，而且每台 Mac 都实现了这一转变——除了 Mac Pro。</p></div><div class="col-sm-12"><p>相反，新 Mac Pro 的<a href="https://appleinsider.com/articles/23/06/05/apple-silicon-mac-pro-debut-finally-ends-transition-away-from-intel-processors">发布</a>花了三年时间。</p></div><div class="col-sm-12"><p>这台 Mac Pro 在很多方面都与处理器不同。 2006 年的原版车型花了一些时间才成为经典，但 2023 年的版本却不太可能成为经典。</p></div><div class="col-sm-12"><p>它是一款<a href="https://appleinsider.com/articles/23/06/20/mac-pro-m2-review---maybe-a-true-modular-mac-will-come-in-a-few-more-years">出色的 Mac</a> ，官方称其为该系列中的顶级产品，但在过渡到 Apple Silicon 的三年时间里，所有其他 Mac 都率先实现了这一目标，其中包括一台全新的 Mac。 Mac Studio <a href="https://appleinsider.com/articles/22/03/22/mac-studio-with-m1-uitra-review-a-look-at-the-future-power-of-apple-silicon">于 2022 年</a>推出，是多年来第一款全新的 Mac，然后<a href="https://appleinsider.com/articles/23/06/05/mac-studio-gets-updated-with-powerful-m2-max-and-m2-ultra-processors">在 2023 年</a>进行了更新，与 Mac Pro 的发布同时进行。</p></div><div class="col-sm-12"><p> Mac Studio 就像挤压的 Mac mini，具有相同的底座，只是底盘更高。没有人期望 Mac Studio 具有很强的可扩展性，因此它配备了许多端口，而且它们位置优越，易于访问，这是一个好处。</p></div><div class="col-sm-12"><p>尽管 Apple Silicon Mac Pro 可能拥有模块化功能，可能配备允许扩展卡的机箱，但这些卡的用途受到<a href="https://appleinsider.com/articles/23/06/05/apple-silicon-mac-pro-does-not-support-pci-e-radeon-video-cards">严格限制</a>。</p></div><div class="col-sm-12"><p>肯定会阻止新款 Mac Pro 受到喜爱的致命事实是，它的性能并不优于新款 Mac Studio。</p></div><div class="col-sm-12"><h2 data-anchor="back-to-the-future" id="back-to-the-future">回到未来</h2></div><div class="col-sm-12"><p>最初的 2006 Mac Pro 完美地结合了性能、功能和可升级性。 2013 版本放弃了可升级的一面，然后 2019 版本又把它带回来了。</p></div><div class="col-sm-12"><p> Apple Silicon Mac Pro 在模块化和可扩展性方面处于中间位置。</p></div><div class="col-sm-12"><p>不过，它的价格也比以前低得多。购买 2019 年 Mac Pro 配置的价格超过 50,000 美元非常简单，而购买一台 2023 年 Apple Silicon Mac Pro 的最高价格约为 10,000 美元。</p></div><div class="col-sm-12"><p>因此，它可能会受到目标受众的欢迎，因为它确实以更低的价格提供了更多的性能。只是 Mac Studio 与该性能相当，而且价格便宜得多。</p></div><div class="col-sm-12"><p>那么，最初的奶酪刨丝器 Mac Pro 可能就是瓶中捕捉闪电的一个例子。</p></div><div class="col-sm-12"><div class="primis-ad-wrap"></div></div><p></p> ]]>;</description><pubDate> Mon, 07 Aug 2023 10:32:22 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/articles/22/08/07/the-cheesegrater-mac-pro-is-16-year-old-and-still-the-best-mac-ever-made----for -现在</guid><link/>https://appleinsider.com/articles/22/08/07/the-cheesegrater-mac-pro-is-16-year-old-and-still-the-best-mac-ever-made----for -现在<author><![CDATA[William Gallagher]]></author></item><item><title><![CDATA[Understanding MetalKit: Getting started with Apple's graphics framework]]></title><description><![CDATA[<div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><h2 data-anchor="getting-started" id="getting-started">入门</h2></div><div class="col-sm-12"><p>Metal 是 Apple 的 3D 图形和游戏管道，用于在 Apple 设备上渲染 3D 对象。 Metal 旨在取代 OpenGL 和其他 3D 框架，其优点是针对 Apple 硬件进行了优化，以实现最大性能。</p></div><div class="col-sm-12"><p> Apple 在 Apple 设备上提供极其流畅的 3D 渲染，其性能水平是其他 3D 框架无法实现的。</p></div><div class="col-sm-12"><p>如果您订阅并运行 Apple 的 Arcade 游戏应用程序，您可能已经在 iOS 或<a href="https://appleinsider.com/inside/macos" title="苹果系统" data-kpt="1">macOS</a>设备上看到了 Metal 渲染的示例。 Arcade中的简介动画是用Metal渲染的： </p></div><div class="col-sm-12"><div class="primis-ad-wrap"></div></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55525-112889-metal-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112889-metal-xl.jpg" alt="使用 Metal 渲染的 Apple Arcade 应用程序简介。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div></div><div class="col-sm-12"><p>在 2015 年的<a href="https://appleinsider.com/inside/wwdc" title="全球开发者大会" data-kpt="1">WWDC</a>上，Apple 推出了另一个更高级别的 Metal 框架，称为 MetalKit。该框架提供了一些高级功能，使 3D 应用程序开发变得更加简单，从而使 Metal 的使用变得更加容易。</p></div><div class="col-sm-12"><p>具体来说，MetalKit 在以下领域提供了额外的 Metal API：</p></div><div class="col-sm-12"><ol>纹理加载模型I/O视图管理</ol></div><div class="col-sm-12"><h2 data-anchor="texture-loading" id="texture-loading">纹理加载</h2></div><div class="col-sm-12"><p>使用 MetalKit，通过使用<code>MTKTextureLoader</code>类可以更轻松地加载资源和纹理。此类提供了一种加载资源和纹理以及设置纹理选项的简单方法。</p></div><div class="col-sm-12"><p>这些选项包括<em>mipmap</em>使用和加载、缓存和存储模式、纹理坐标转换、立方体纹理使用和 RGB 颜色选项。</p></div><div class="col-sm-12"><p> mipmap（或 MIP 贴图）只是一个多层图像，每一层的分辨率逐渐低于前一层。 Mipmap 用于加速图像渲染并消除锯齿伪像，例如莫尔图案。</p></div><div class="col-sm-12"><p>莫尔图案是一种分散注意力的条带或色彩伪影图案，有时出现在由线条或规则像素图案（例如交替像素网格）组成的计算机图形中：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55525-112879-moire-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112879-moire-xl.jpg" alt="莫尔图案。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">莫尔图案。</span></div></div><div class="col-sm-12"><p> MTKTextureLoader 的完整文档可在 Apple 开发者网站的 Metal 框架文档（Documentation/MetalKit/MTKTextureLoader）中找到。</p></div><div class="col-sm-12"><h2 data-anchor="model-io" id="model-io">型号输入/输出</h2></div><div class="col-sm-12"><p>Model I/O 是 Apple 用于管理 3D 和 2D 资产的开发人员框架。 MetalKit 的模型 I/O 集成包括用于将纹理快速加载到 Metal 缓冲区并使用容器使用网格数据的 API。</p></div><div class="col-sm-12"><p>目前 MetalKit 中有大约六个与模型 I/O 相关的类，主要处理网格。 （我们很快就会介绍类和面向对象编程）。</p></div><div class="col-sm-12"><h2 data-anchor="view-management" id="view-management">查看管理</h2></div><div class="col-sm-12"><p>大多数<a href="https://appleinsider.com/inside/ios" title="iOS系统" data-kpt="1">iOS</a>和 macOS 应用程序都使用<em>视图</em>- 在屏幕上呈现视觉信息和 UI 元素的标准类。不同的视图子类提供不同类型的视图。</p></div><div class="col-sm-12"><p>例如，在 iOS 中，UIView 是视图基类，但 UIButton 是从 UIView 派生的按钮视图类。通过在 iOS 或 macOS 中使用面向对象的视图类，您可以构建依赖于 Apple 类已定义的标准功能的附加功能。</p></div><div class="col-sm-12"><p>这称为<em>对象继承</em>。将应用程序中的对象视为封装代码和代码操作的数据的代码包。通过将两者捆绑在一起形成对象，代码可以很容易地被其他对象重用和改变用途。</p></div><div class="col-sm-12"><p>特别是在 MetalKit 中，提供了一个新类 - MTKView，它允许开发人员在应用程序中创建成熟的 Metal 视图。通过拥有专用的 Metal 视图类，可以通过 Metal 最佳地绘制和管理视图，而无需任何额外的代码。</p></div><div class="col-sm-12"><p> Apple 的 MTKView 文档位于开发者网站 Documentation/MetalKit/MTKView。 MTKView 还要求您首先在其属性之一中设置 MTLDevice，以告诉它将 Metal 对象渲染到哪个设备和屏幕中。</p></div><div class="col-sm-12"><p>当询问您可以将纹理渲染到哪个时，MTKView 还提供了 MTLRenderPassDescriptor。查看 Apple 开发者网站的文档/金属/渲染通道部分。</p></div><div class="col-sm-12"><h2 data-anchor="a-little-oop" id="a-little-oop">一点面向对象编程</h2></div><div class="col-sm-12"><p>在<em>面向对象编程</em>（OOP）中，对象由<em>类</em>定义。类是源代码文件中的定义，它定义了对象包含的内容，在<a href="https://appleinsider.com/inside/swift" title="迅速" data-kpt="1">Swift</a>中，定义了对象的实际实现。</p></div><div class="col-sm-12"><p>类定义了可以接收其他对象发送给它们的<em>消息</em>以执行某些功能的方法（函数）。每个方法都包含执行某些工作的代码。</p></div><div class="col-sm-12"><p>类还定义可以包含数据的<em>属性</em>或变量。通常，类的方法对类的属性执行一些工作。大多数（但不是所有）方法可以读取类或其<em>超类</em>（父类）之一中包含的大多数（但不是全部）属性。</p></div><div class="col-sm-12"><p>以上所有内容称为对象<em>封装</em>。对象封装数据和方法以保持一切整洁和有组织。在一个地方传输、引用、复制和使用对象及其关联数据比单独跟踪数据更容易。</p></div><div class="col-sm-12"><p><em>继承</em>是一种 OOP 功能，通过它可以从另一个类定义新类。派生对象称为<em>子类</em>，父类称为<em>超类</em>。</p></div><div class="col-sm-12"><p>长链对象可以通过子类化来定义。继承非常强大，因为它允许您几乎无需任何工作即可重用现有代码。</p></div><div class="col-sm-12"><p>子类继承其父类的所有行为和属性，几乎不需要任何额外的工作。子类可以添加只有它们（或其子类）知道的附加方法。</p></div><div class="col-sm-12"><p>更好的是，当您在程序中<em>实例化</em>（创建）对象的<em>实例</em>（一个副本）时，它还会<em>自动</em>实例化其所有超类对象的副本。</p></div><div class="col-sm-12"><p>使用一行代码，您只需创建一个类的实例即可获得大量的程序功能。</p></div><div class="col-sm-12"><p>实例化只是创建一个对象，在 RAM 中为其分配内存，并使其可供程序使用。</p></div><div class="col-sm-12"><p>所有这些通常都定义在一个源代码文件中，或者在 Objective-C 的情况下定义在两个源代码文件中——通常每个类一到两个文件。</p></div><div class="col-sm-12"><p>因此，在我们上面的讨论中，MTKView 被定义为一个类（由 Apple 定义），并在代码中创建时（由您）实例化。结果是内存中的 MTKView 对象可供使用。当不再需要 MTKView 对象时，它会<em>被解除分配</em>，从而将其从内存中删除并销毁。</p></div><div class="col-sm-12"><p>大多数应用程序都是创建、使用、管理和销毁数百个此类对象的程序。</p></div><div class="col-sm-12"><p> OOP 编程范式非常强大，因为它通过子类化和<em>重用</em>大大减少了所需的代码量，并通过封装代码和数据使程序更加模块化和可重用。</p></div><div class="col-sm-12"><p>一旦编写了一个类来执行某些特定工作，您就可以简单地在另一个程序中重用该类或对其进行子类化，以快速创建另一个应用程序。 </p></div><div class="col-sm-12"><h2 data-anchor="core-animation-in-metalkit" id="core-animation-in-metalkit">MetalKit 中的核心动画</h2></div><div class="col-sm-12"><p>与许多 iOS 或 macOS 标准视图一样，MTKView 也有一个<em>核心动画层</em>。 Core Animation 是Apple 的高性能2D 动画框架。</p></div><div class="col-sm-12"><p>大多数视图都有一个<em>CALayer</em> - 一个核心动画层对象，可以绘制 2D 图形并为其设置动画。 CALayers 可以分组和组合以创建复杂的动画。</p></div><div class="col-sm-12"><p> MTKView 有自己的 CALayer 子类，称为 CAMetalLayer，Metal 可以渲染到其中。您可以将 CAMetalLayer 与其他 CA 层组合起来以创建组合的 2D 和 3D 动画。</p></div><div class="col-sm-12"><p>在大多数情况下，对于 2D 和 3D CALayers，绘图比 UIView 中的绘图更快、更高效。您还可以设置 CA 图层的不透明度或<em>alpha</em> ，使其部分透明。</p></div><div class="col-sm-12"><h2 data-anchor="mtkview-modes" id="mtkview-modes"> MTKView 模式</h2></div><div class="col-sm-12"><p>MTKView支持三种绘图模式：</p></div><div class="col-sm-12"><ol>明确的定时通知</ol></div><div class="col-sm-12"><p>在定时绘图中，视图按对象内部设置的定期间隔更新。当游戏场景以每秒帧数 (fps) 描述的特定速率渲染或绘制时，大多数游戏都会使用此模式。</p></div><div class="col-sm-12"><p>使用定时模式，您还可以设置或清除<code>isPaused</code>属性来启动和停止视图动画。</p></div><div class="col-sm-12"><p>在通知模式下，当所有视图的某些部分变得无效时，就会发生重绘。这允许您仅重绘视图或图层的一部分 - 这会花费更少的时间并提高游戏性能。</p></div><div class="col-sm-12"><p>要使用通知模式强制重绘，只需向视图对象发送 setNeedsDisplay() 消息以强制其重绘。这会强制视图通过向每个子视图发送 setNeedsDisplay() 消息来重绘所有子视图。</p></div><div class="col-sm-12"><p>在显式绘制中，您可以通过直接向视图对象发送draw()消息来重绘视图内容。通常不鼓励这样做，除非您使用一些自定义绘图工作流程来执行标准视图/子视图层次结构之外的操作。</p></div><div class="col-sm-12"><p>您还可以通过发送子视图 setNeedsDisplay() 消息来仅重绘视图的一部分，从而绕过顶级视图重绘。一般来说，重绘的对象越少，性能就越好。</p></div><div class="col-sm-12"><p>对于 MTKView 或其子类，在绘图方法中，您从视图中获取 MTLRenderPassDescriptor，渲染到其中，然后呈现生成的可<em>绘制对象</em>以供显示。</p></div><div class="col-sm-12"><p>可绘制对象是任何已编码并准备好显示的 Metal 对象。</p></div><div class="col-sm-12"><h2 data-anchor="mtkviewdelegate" id="mtkviewdelegate"> MTKViewDelegate</h2></div><div class="col-sm-12"><p>在 Apple 的 Swift 和 Objective-C 编程语言中，<em>委托</em>是代表另一个对象执行某些工作的对象。</p></div><div class="col-sm-12"><p>通常，一个对象会声明一个委托对象作为其属性之一，委托声明它提供哪些方法（函数）。</p></div><div class="col-sm-12"><p>委托非常强大，因为您只需更改对象的委托属性即可更改对象的行为。委托还用于为对象提供附加功能，而无需子类化一个对象来创建另一个对象。</p></div><div class="col-sm-12"><p> <code>MTKView</code>有自己的委托对象，称为<code>MTKViewDelegate</code>类，Apple 文档中也对此进行了描述。 <code>MTKViewDelegate</code>主要响应视图重绘和调整大小事件。</p></div><div class="col-sm-12"><p> <code>MTKViewDelegate</code>还继承了所有 Apple 对象通用的标准 Objective-C 协议，称为<em>NSObjectProtocol</em> 。</p></div><div class="col-sm-12"><p>将委托和协议视为可以附加到或“粘合”到其他对象的附加对象和方法。</p></div><div class="col-sm-12"><p>在 Objective-C 和 Swift 中，<em>协议</em>只是类必须实现的附加方法的列表。协议中每个方法的内容由每个类定义。</p></div><div class="col-sm-12"><p> <code>MTKViewDelegate</code>主要关注更改视图的布局（例如，在设备旋转上）和绘图。</p></div><div class="col-sm-12"><p>例如，您可以定义多个<code>MTKViewDelegate</code>对象，每个对象都有不同的行为，然后只需将其<code>delegate</code>属性重置为任意一个委托对象并重新绘制即可更改<code>MTKView</code>的绘制或旋转行为。</p></div><div class="col-sm-12"><h2 data-anchor="rendering" id="rendering">渲染</h2></div><div class="col-sm-12"><p>使用<code>MTKView</code>时，在渲染器中实现<code>MTKViewDelegate</code>的方法。这允许您的渲染器与<code>MTKView</code>交互并提供绘图和布局更改。</p></div><div class="col-sm-12"><p>您可以使用 MTKView 的<code>currentRenderPassDescriptor</code>属性获取何时渲染每一帧的信息。这允许您与要渲染的每个帧进行交互。</p></div><div class="col-sm-12"><p>例如在 Swift 中：</p></div><div class="col-sm-12"><p> <code>if let onscreenDescriptor = view.currentRenderPassDescriptor</code></p></div><div class="col-sm-12"><p>这将获取<code>MTKView</code>的当前渲染通道描述符并将其存储在名为<code>onscreenDescriptor</code>变量中。</p></div><div class="col-sm-12"><p>渲染后，您必须使用可绘制对象来更新视图的内容。为此，请调用<code>MTLCommandBuffer</code>对象上的 present(_:) 方法，然后将<code>commit()</code>消息和命令缓冲区发送到 GPU 进行显示。</p></div><div class="col-sm-12"><p> <code>MTKView</code>的文档中有对此过程的更详细讨论。</p></div><div class="col-sm-12"><h2 data-anchor="simd" id="simd">单指令多数据流</h2></div><div class="col-sm-12"><p>苹果还有一个名为<em>SIMD 的</em>数学相关框架，在操作 3D 和 2D 对象以及对它们和矩阵执行计算时，它会派上用场。这些函数中的大多数用于执行 3D 计算中常见的快速、高效的浮点数学。</p></div><div class="col-sm-12"><p>当您需要变换 3D 对象和对象上的顶点时，SIMD 会派上用场。 SIMD 中最常见和最有用的数据结构是<code>simd_float4x4</code> ，它是单精度浮点值的 4×4 矩阵。 </p></div><div class="col-sm-12"><h2 data-anchor="tying-it-all-together-in-xcode" id="tying-it-all-together-in-xcode">在 Xcode 中将它们整合在一起</h2></div><div class="col-sm-12"><p>掌握了所有这些背景知识后，您现在就可以在<a href="https://appleinsider.com/inside/xcode" title="Xcode" data-kpt="1">Xcode</a>中创建 MetalKit 应用程序了。在以下示例中，我们假设您将创建一个简单的 3D 应用程序，其中包含单个场景，该场景包含单个 Metal 3D 对象。</p></div><div class="col-sm-12"><p>要编写 Xcode MetalKit 应用程序，您需要熟悉 Apple 的 Swift 和 Objective-C 编程语言，以及一点 ANSI-C - 一种早期的纯 C 语言，由贝尔实验室于 1972 年创建 UNIX 时发明。</p></div><div class="col-sm-12"><p>首先，打开 Xcode，然后从“文件”菜单中选择<strong>“文件”->;“新建项目”</strong> 。从项目模板选择器中，选择顶部的<strong>iOS</strong>或<strong>macOS</strong> ，然后从下面的图标中选择<strong>游戏</strong>并单击<strong>下一步</strong>：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55525-112880-xcode-1-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112880-xcode-1-xl.jpg" alt="选择了" game="" template.="" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">选择“游戏”模板。</span></div></div><div class="col-sm-12"><p>在下一个窗格中输入应用程序名称、捆绑包 ID 和组织信息，然后从下面的两个弹出菜单中选择<strong>Swift</strong>和<strong>Metal</strong> ：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55525-112881-xcode-2-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112881-xcode-2-xl.jpg" alt="输入项目详细信息。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">输入项目详细信息。</span></div></div><div class="col-sm-12"><p>单击<strong>下一步</strong>并将新的 Xcode 项目保存到磁盘。</p></div><div class="col-sm-12"><p>您还需要将 3D 对象的纹理图像定义为 .png 文件，并将其添加到您的 Xcode 项目中。该纹理文件在渲染时“包裹”到您的 3D 对象上。</p></div><div class="col-sm-12"><p> Xcode 的 Metal 游戏模板应用程序提供了应用程序所需的最小默认模板源文件，但首先，您需要添加 Metal 框架以告诉 Xcode 在运行时将这些框架链接到您的应用程序。</p></div><div class="col-sm-12"><p>为此，在 Xcode 项目编辑器中，通过选择项目窗口左上角的项目图标来选择项目名称，然后在 Targets 部分下选择目标名称右侧的目标名称：</p></div><div class="col-sm-12"><div class="align-center"><a href="https://photos5.appleinsider.com/gallery/55525-112882-Screenshot-3-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112882-Screenshot-3-xl.jpg" alt="选择目标。" height="621" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">选择目标。</span></div></div><div class="col-sm-12"><p>滚动到窗口底部，在“框架、库和嵌入内容”部分下，单击<strong>“+”</strong>按钮。将出现框架选择窗格。</p></div><div class="col-sm-12"><div class="align-center"><a href="https://photos5.appleinsider.com/gallery/55525-112884-Screenshot-2-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112884-Screenshot-2-xl.jpg" alt="点击" button.="" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">单击“+”按钮。</span></div></div><div class="col-sm-12"><p>在顶部的搜索框中输入“metal”，然后按住 Command 键单击列出的七个框架中的六个（不包括“MetalFX.framework”）。有数百个可用的 Xcode 框架。</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55525-112883-Screenshot-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112883-Screenshot-xl.jpg" alt="添加框架表。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">添加框架表。</span></div></div><div class="col-sm-12"><p>您还需要添加 libswiftsimd.tbd 库、核心服务框架以及可选的 Accelerate 框架。</p></div><div class="col-sm-12"><p> “tbd”是<em>“待定”</em>的占位符，因为实际代码库的版本号可能会发生变化。在 Xcode 中包含 .tbd 库会告诉 Xcode 使用该库的<em>最新</em>版本。</p></div><div class="col-sm-12"><p>如果您想使用 Model I/O 来管理资产，还需添加“libswiftModelIO.tbd”和“ModelIO.framework”。</p></div><div class="col-sm-12"><p>如果您在模板选择器中创建了 iOS 应用程序，还需添加 UIKit.framework。如果您在模板选择器中创建了 macOS 应用程序，还请添加 Cocoa.framework。</p></div><div class="col-sm-12"><p>最后，包括 Foundation.framework 和 CoreFoundation.framework。 Foundation 是大多数 iOS 和 macOS 应用程序使用的核心 C 语言框架。所有 Foundation API 调用均采用纯 C 语言。</p></div><div class="col-sm-12"><h2 data-anchor="shaders" id="shaders">着色器</h2></div><div class="col-sm-12"><p>Metal 游戏应用程序的完整代码超出了本文的范围，因此我们将在此简要介绍单对象示例的基础知识。 Apple 的示例项目模板创建了一个在空间中旋转的 3D 立方体。</p></div><div class="col-sm-12"><p> Xcode 创建一个控制应用程序本身的常规事件循环的应用程序委托文件，以及一个<code>ShaderTypes.h</code>文件，该文件是定义着色器的网格和顶点信息的头文件，以及定义投影矩阵和模型视图矩阵的 C 结构体。</p></div><div class="col-sm-12"><p>这些由着色器在绘图时使用。</p></div><div class="col-sm-12"><p> “Shaders.metal”文件导入上面定义的“ShaderTypes.h”头文件，该文件在渲染器和 GameViewController.swift 文件之间共享，我们稍后会得到它。您可以使用<code>import</code>预处理器指令将头文件导入到其他 Swift 或 Objective-C 源代码文件中：</p></div><div class="col-sm-12"><p> <code>#import &quot;ShaderTypes.h&quot;</code></p></div><div class="col-sm-12"><p>预处理器指令是在实际编译<em>之前</em>运行的编译器指令，通常以“#”符号开头。</p></div><div class="col-sm-12"><p> “Shaders.metal”还使用早期的 ANSI-C 导入指令<code>#include</code>导入其他两个文件， <code>metal_stdlib</code>和<code>simd.h</code> #import 和 #include 都很相似，这里我们不会详细讨论两者之间的区别。</p></div><div class="col-sm-12"><p>在下面你会看到这一行：</p></div><div class="col-sm-12"><p> <code>using namespace metal;</code></p></div><div class="col-sm-12"><p><em>命名空间</em>是一种 C++ 习惯用法，允许通过在命名空间下定义相似或相同的代码部分来定义和隔离它们。每个命名空间都有自己的名称，在本例中<code>metal</code> 。</p></div><div class="col-sm-12"><p>在 Shaders.metal 中，您定义<code>Vertex</code>和<code>ColorInOut</code>结构，以及定义着色器的几个函数 - 在本例中只有顶点着色器和片段着色器。片段着色器还包含一个采样器变量，您可以根据需要定义和使用 mipmap。</p></div><div class="col-sm-12"><p> <code>fragmentShader</code>函数将颜色信息、SharderTypes.h 中定义的<code>Uniforms</code>结构以及 Metal 库标头“metal_texture”中定义的<code>texture2d</code>作为其参数。</p></div><div class="col-sm-12"><p>如前所述， <code>Uniforms</code>参数包含投影矩阵和模型视图矩阵。</p></div><div class="col-sm-12"><h2 data-anchor="renderer" id="renderer">渲染器</h2></div><div class="col-sm-12"><p>下一个文件 Renderer.swift 定义了对象的<code>Renderer</code>类，该类继承自 Objective-C 基类<code>NSObject</code>并符合<code>MTKViewDelegate</code>协议。</p></div><div class="col-sm-12"><p>作为一个历史记录，NSObject 可以追溯到 NeXT Computer 时代——<a href="https://appleinsider.com/inside/steve-jobs" title="史蒂夫·乔布斯" data-kpt="1">史蒂夫·乔布斯</a>1985 年被 Apple 解雇后的第二家公司。NeXT 发明了 Objective-C，并拥有一个名为<em>NeXTStep</em>的操作系统和框架。 <code>NSObject</code>中的“NS”代表“NeXTStep”。</p></div><div class="col-sm-12"><p>大多数早期的 NeXTStep 对象都有前缀“NS”，以区别于第三方对象。当 Apple 于 1997 年收购 NeXT Computer Inc. 时，它获得了 NeXT 的所有技术，包括 NeXTStep。</p></div><div class="col-sm-12"><p>迄今为止，macOS 和 iOS 仍基于 NeXTStep。</p></div><div class="col-sm-12"><p> Renderer 类的属性包括 MTLDevice、MTLCommandQueue、MTLBuffer、MTLRenderPipelineState、MTLDepthStencilState 和 MTLTexture 以及矩阵、旋转、网格和信号量的属性。</p></div><div class="col-sm-12"><p><em>信号量</em>是一个线程（执行路径），它依赖于一个标志来告诉它何时可以运行以及何时不能运行。</p></div><div class="col-sm-12"><p>当您实例化<code>Render</code>对象时，您可以在其<code>init</code>方法中向其传递一个<code>MTKView</code> ，我们稍后会介绍该方法。</p></div><div class="col-sm-12"><p>一旦创建了对象，它的<code>init</code>方法就会运行，并且该方法中的所有代码都会运行。</p></div><div class="col-sm-12"><p> <code>init</code>方法在方法顶部设置并分配其所有属性，然后通过 self.device.makeBuffer() 行创建渲染缓冲区。</p></div><div class="col-sm-12"><p>然后它在传入<code>init</code>方法的 metalKitView 上设置一些属性，通过<code>Renderer.buildMetalVertexDescriptor()</code>创建顶点描述符，然后通过<code>Renderer.buildRenderPipelineWithDevice()</code>构建渲染管道。</p></div><div class="col-sm-12"><p>接下来，代码创建深度和模板信息，然后通过<code>Renderer.buildMesh</code>创建网格。</p></div><div class="col-sm-12"><p>最后，它通过<code>Renderer.loadTexture()</code>构建颜色图和纹理。</p></div><div class="col-sm-12"><p>您需要使用渲染器的纹理加载器方法<code>loadTexture:device:textureName:</code>从上面创建的 .png 文件加载纹理 - 传递纹理的文件名 - 在本例中为<code>&quot;ColorMap&quot;</code> 。</p></div><div class="col-sm-12"><p> <code>do/catch</code> Swift 构造用于错误处理。尝试执行<code>do</code>中包含的代码，如果失败，则运行<code>catch</code>块，否则程序继续正常执行。 </p></div><div class="col-sm-12"><h2 data-anchor="the-superclasss-init-method" id="the-superclasss-init-method">超类的 init() 方法</h2></div><div class="col-sm-12"><p>最后，在渲染器的<code>init</code>方法结束时，运行<em>超类的</em><code>init</code>方法：</p></div><div class="col-sm-12"><p> <code>super.init()</code></p></div><div class="col-sm-12"><p>在 Swift 类的<code>init</code>方法末尾发送<code>super.init()</code>消息到超类可确保创建类层次结构中的整个对象链。这是 Swift 和 Objective-C 中的标准模式。</p></div><div class="col-sm-12"><p>如果您无法调用超类的<code>init</code>方法，则该对象很可能会崩溃，或者充其量无法正常运行 - 或者您的应用程序本身将会崩溃。</p></div><div class="col-sm-12"><p>由于子类在运行时依赖于超类方法，因此如果超类对象不存在，则子类的方法调用可能会被发送到随机内存空间，而它所期望的代码不存在。</p></div><div class="col-sm-12"><p>当发生这种情况并且处理器尝试在该内存位置执行代码时，肯定会发生崩溃 - 那里没有代码可以运行。</p></div><div class="col-sm-12"><p> <code>super.init()</code>通常在 Swift 和 Objective-C 中<em>最后</em>调用，以便让您的对象有时间在设置超类对象之前进行所需的任何设置。</p></div><div class="col-sm-12"><p>最后，渲染器的<code>init</code>方法以右大括号“}”结束。</p></div><div class="col-sm-12"><h2 data-anchor="renderer-methods" id="renderer-methods">渲染器方法</h2></div><div class="col-sm-12"><p>Renderer.swift 中的<code>init()</code>方法之后是 Renderer 类中其他方法的实际实现。每个 Swift 函数都以<code>class func</code>为前缀，后跟函数名称，以及括号中的任何函数参数。</p></div><div class="col-sm-12"><p>如果 Swift 方法在完成时返回一个值，则该返回值类型由<code>->;</code>构造定义。例如：</p></div><div class="col-sm-12"><p> <code>class func buildMetalVertexDescriptor() ->; MTLVertexDescriptor</code>定义了一个名为<code>buildMetalVertexDescriptor</code>的方法（函数），该方法在成功完成时返回<code>MTLVertexDescriptor</code> 。这称为<em>返回值</em>或返回类型。</p></div><div class="col-sm-12"><p>正如我们之前看到的， <code>buildMetalVertexDescriptor</code>方法是在对象实例化时从<code>init()</code>方法<em>内部</em>调用的。许多对象都是这样工作的。</p></div><div class="col-sm-12"><p>但大多数方法也可以从外部对象调用，除非类定义明确禁止。</p></div><div class="col-sm-12"><h2 data-anchor="game-loop" id="game-loop">游戏循环</h2></div><div class="col-sm-12"><p>渲染器游戏循环以及渲染器和 MTKView 的<code>draw</code>方法驱动大多数 Metal 游戏。这与应用程序委托对象中监视的主事件循环相结合，驱动应用程序在设备上运行。</p></div><div class="col-sm-12"><p>在 Render.swift 文件中，您会注意到一个名为<code>private func updateGameState()</code>的方法，该方法可以定期运行以更新游戏中存储的任何状态，例如对象位置、鼠标、键盘或游戏控制器输入、位置、计时、分数等</p></div><div class="col-sm-12"><p>Swift 关键字<code>private</code>意味着此方法是私有的，并且只能从此对象和此源文件中定义的任何扩展调用 - 外部对象无法将该消息发送到 Renderer 对象。</p></div><div class="col-sm-12"><p>这种额外的访问控制确保仅从某些对象内部和由某些对象正确执行程序 - 在这种情况下，由于渲染器负责游戏的一般执行和控制，因此您不希望任何外部对象干扰它。</p></div><div class="col-sm-12"><p> Apple 在<a href="https://docs.swift.org/">Swift 文档</a>网站上的 Swift 开发人员文档中拥有完整的对象访问控制部分。</p></div><div class="col-sm-12"><h2 data-anchor="frame-rendering" id="frame-rendering">帧渲染</h2></div><div class="col-sm-12"><p>接下来在 Renderer.swift 中，我们看到了<code>draw()</code>方法：</p></div><div class="col-sm-12"><p> <code>func draw(in view: MTKView)</code></p></div><div class="col-sm-12"><p>您传入要在其中完成绘图的 MTKView。请注意，该函数没有返回值。 Swift 和 Objective-C 中的此类函数称为 void 函数。</p></div><div class="col-sm-12"><p>在每帧调用一次的<code>draw()</code>方法中，信号量被告知等待一定的时间：</p></div><div class="col-sm-12"><p> <code>inFlightSemaphore.wait()</code></p></div><div class="col-sm-12"><p>然后创建命令缓冲区并将其发送到信号量进行渲染，添加<em>完成处理程序</em>。</p></div><div class="col-sm-12"><p><em>完成处理程序</em>是一个在其他任务或线程完成时自动运行的函数。完成处理程序是一种以顺序方式执行代码的方法，但仅当代码的其他部分完成时才执行。</p></div><div class="col-sm-12"><p>完成处理程序提供有保证的代码执行，但无需编写代码来管理复杂的计时器算法和等待条件。</p></div><div class="col-sm-12"><p>接下来，3D 对象缓冲区和游戏状态按以下顺序更新：</p></div><div class="col-sm-12"><p> <code>self.updateDynamicBufferState()</code></p></div><div class="col-sm-12"><p> <code>self.updateGameState()</code></p></div><div class="col-sm-12"><p>接下来，从<code>MTKView</code>获取渲染通道描述符，并更新渲染通道编码器属性：</p></div><div class="col-sm-12"><p> <code>let renderPassDescriptor = view.currentRenderPassDescriptor</code></p></div><div class="col-sm-12"><p>然后运行一个短循环来获取网格顶点描述符布局和缓冲区并将它们存储在渲染编码器中。然后设置渲染编码器的片段纹理信息：</p></div><div class="col-sm-12"><p> <code>renderEncoder.setFragmentTexture(colorMap, index: TextureIndex.color.rawValue)</code></p></div><div class="col-sm-12"><p>接下来，对于<code>.submeshes</code>数组中的每个网格（对象），调用<code>renderEncoder.drawIndexedPrimitives()</code> 。这是场景中每个对象被编码的地方。</p></div><div class="col-sm-12"><p>为了结束编码阶段，调用<code>renderEncoder.endEncoding()</code> 。现在所有对象都已准备好绘制。</p></div><div class="col-sm-12"><p>然后通过以下方式获取视图的可绘制对象：</p></div><div class="col-sm-12"><p> <code>if let drawable = view.currentDrawable</code></p></div><div class="col-sm-12"><p>如果成功，则使用以下命令绘制整个命令缓冲区：</p></div><div class="col-sm-12"><p> <code>commandBuffer.commit()</code></p></div><div class="col-sm-12"><p>对<code>commit</code>的调用实际上将场景的帧发送到 GPU 以在屏幕上显示。</p></div><div class="col-sm-12"><p>以上所有情况均以 30、60 或 120 fps 发生。</p></div><div class="col-sm-12"><p> Renderer.swift 文件以一些通用 3D 数学转换和旋转函数结尾。 </p></div><div class="col-sm-12"><h2 data-anchor="displaying-the-scene-in-a-view-onscreen" id="displaying-the-scene-in-a-view-onscreen">在屏幕上的视图中显示场景</h2></div><div class="col-sm-12"><p>您会注意到 Xcode 项目中还有两个文件：GameViewController.swift 和 Main.storyboard。这些是大多数 iOS 应用程序中的典型文件。</p></div><div class="col-sm-12"><p>典型的 iOS 应用程序包含在 UIKIt 框架中定义的中央顶级<code>UIViewController</code>类。 <code>UIViewController</code>是一个管理和控制另一个 UIKIt 类 - <code>UIView</code>类。</p></div><div class="col-sm-12"><p> <code>UIView</code>类是包含其他<code>UIView</code>子类（例如按钮、图像、文本和其他 UIKIt 对象）的类。 <code>UIView</code>是 iOS 应用程序的用户界面在屏幕上的呈现方式。</p></div><div class="col-sm-12"><p>每个<code>UIViewController</code>类都有一个名为<code>view</code>的属性，它是<code>UIView</code>的实例。视图控制器管理<code>UIView</code> 。</p></div><div class="col-sm-12"><p>如果您查看 Apple 的<code>UIViewController</code>文档，您会注意到有六种用于管理视图的方法，即加载视图、在视图加载时收到通知以及卸载视图的方法。</p></div><div class="col-sm-12"><p>在大多数 iOS 应用程序中，您不会直接加载顶级视图 - 您可以通过实例化您定义的<code>UIViewController</code>子类（在本例中为<code>GameViewController</code> ）来加载它。视图的用户界面部分是在 Xcode 的 Interface Builder 编辑器中创建的，或者通过纯文本 SwiftUI 视图创建的。</p></div><div class="col-sm-12"><p>通常，在创建 iOS 应用程序时，您可以通过从 Xcode 库中拖动可视组件并将其放入屏幕上的视图控制器对象中来布局 Interface Builder 中的每个视图。</p></div><div class="col-sm-12"><p>一旦您的 UI 对象全部布置在屏幕上，您可以通过按住 Control 键单击将它们连接到视图控制器的属性，然后从每个 UI 元素拖动到视图控制器的<em>第一个响应者</em>。第一响应者是视图控制器对象层次结构中能够响应该对象的消息的第一个对象。</p></div><div class="col-sm-12"><p>当您从 Control 键上释放鼠标按钮并单击并拖动到上方时，Xcode 将显示可连接对象的可用对象属性列表。</p></div><div class="col-sm-12"><p>就是这样 - 您通常不必为每个 UI 元素进行任何编码 - 当视图控制器实例化并加载到内存中时，Swift 或 Objective-C 运行时会自动为您建立所有 UI 连接。</p></div><div class="col-sm-12"><p>这极大地简化了应用程序开发。 </p></div><div class="col-sm-12"><h2 data-anchor="-storyboards-and-segues" id="-storyboards-and-segues">故事板和转场</h2></div><div class="col-sm-12"><p><em>Storyboard</em>文件后来被添加到 Xcode 中，以进一步简化 UI 布局：使用 Storyboard，您可以在视图转换之间定义<em>Segues</em> - 当用户在设备上的每个视图之间导航时，您指定的 Segue 函数将被调用，然后您可以在其中进行任何初始视图设置或清理。</p></div><div class="col-sm-12"><p> Segues 消除了大多数视图加载代码。</p></div><div class="col-sm-12"><h2 data-anchor="viewdidload" id="viewdidload"> viewDidLoad()</h2></div><div class="col-sm-12"><p>在任何情况下，当视图控制器完成加载视图时，都会调用控制器的<code>viewDidLoad()</code>方法。您可以在<code>viewDidLoad()</code>中进行所需的任何其他视图设置。一旦<code>viewDidLoad()</code>退出，视图就可以使用并显示在屏幕上给用户。</p></div><div class="col-sm-12"><p>您可以对<code>UIViewController</code>和<code>UIView</code>进行子类化，以使您的视图高度可定制。要记住的一件事是 iOS 中的大多数 UI 元素都作为属性存储在<code>UIViewController</code>子类中。</p></div><div class="col-sm-12"><p>可以完全用代码创建视图和视图控制器，而无需 Storyboard 或 Interface Builder，但这样做要复杂得多且耗时。 </p></div><div class="col-sm-12"><h2 data-anchor="gameviewcontrollerswift" id="gameviewcontrollerswift">GameViewController.swift</h2></div><div class="col-sm-12"><p>我们看一下<code>GameViewController.swift</code></p></div><div class="col-sm-12"><p>该类在文件顶部定义：</p></div><div class="col-sm-12"><p> <code>class GameViewController: UIViewController</code></p></div><div class="col-sm-12"><p>这意味着<code>GameViewController</code>是<code>UIViewController</code>的子类。</p></div><div class="col-sm-12"><p>类定义包含在匹配的开括号和闭括号（“{”和“}”）中。</p></div><div class="col-sm-12"><p>请注意， <code>GameViewController</code>类非常短 - 仅超过一页。大多数游戏处理工作发生在着色器和渲染器中。</p></div><div class="col-sm-12"><p>接下来，我们看到<code>var</code>关键字定义的两个 Swift 属性：</p></div><div class="col-sm-12"><p> <code>var renderer: Renderer!</code></p></div><div class="col-sm-12"><p> <code>var mtkView: MTKView!</code></p></div><div class="col-sm-12"><p>接下来我们看到<code>GameViewController</code>使用 Swift <code>override</code>关键字覆盖了<code>UIViewController</code>方法<code>viewDidLoad()</code> ：</p></div><div class="col-sm-12"><p> <code>override func viewDidLoad()</code></p></div><div class="col-sm-12"><p>这意味着当视图控制器加载视图并发送<code>viewDidLoad()</code>消息时，将运行<code>GameViewController</code>版本的方法而不是<code>UIViewController</code>版本。这是继承的完美示例：您可以选择让超类的方法运行，或者在子类中重写它并使用该方法。</p></div><div class="col-sm-12"><p>请注意，为了使其起作用，两个类中的两个方法的声明必须<em>相同</em>。</p></div><div class="col-sm-12"><p> <code>override func viewDidLoad()</code>所做的第一件事是向超类（ <code>UIViewController</code> ）发送<code>viewDidLoad()</code>消息。这允许<code>UIViewController</code>执行它需要执行的任何 UI 视图布局初始化。</p></div><div class="col-sm-12"><p>如果没有这个“超级”调用，视图将无法正常工作，因为它的一些内部部分将永远不会被初始化。</p></div><div class="col-sm-12"><p>接下来， <code>GameViewController</code>对象加载 MTKView 并将其存储在其内部属性<code>mtkView</code>中：</p></div><div class="col-sm-12"><p> <code>guard let mtkView = view as? MTKView else</code></p></div><div class="col-sm-12"><p> <code>guard</code>只是一个 Swift 条件测试，用于查看某件事是否成功 - 类似于<code>if</code> 。</p></div><div class="col-sm-12"><p>然后， <code>GameViewController</code>还在其内部<code>defaultDevice</code>属性中存储对设备 Metal 设备的引用。</p></div><div class="col-sm-12"><p> <code>guard let defaultDevice = MTLCreateSystemDefaultDevice() else</code></p></div><div class="col-sm-12"><p>这里要理解的重要一点是两个内部属性或变量：</p></div><div class="col-sm-12"><p> <code>var renderer: Renderer!</code></p></div><div class="col-sm-12"><p> <code>var mtkView: MTKView!</code></p></div><div class="col-sm-12"><p>存储对内存中其他对象的引用 - 在本例中是渲染器和 Metal 视图。一旦存储， <code>GameViewController</code>对象就可以随意访问这些对象。这种模式是大多数对象在 Swift 和 Objective-C 中的工作方式。</p></div><div class="col-sm-12"><p>在 Objective-C 中，这两个属性将被声明为：</p></div><div class="col-sm-12"><p> <code>Renderer *renderer = nil;</code></p></div><div class="col-sm-12"><p> <code>MTKView *mtkView = nil;</code></p></div><div class="col-sm-12"><p> <code>nil</code>是一个 Objective-C 占位符，意思是“什么都没有”，或者更具体地说，内存中没有地址。 nil 用于指示 Objective-C 属性或变量不包含任何内容。</p></div><div class="col-sm-12"><p> <code>&#39;*&#39;</code>是 C 或 Objective-C<em>指针</em>的标准指示符 - 保存对象<em>内存地址</em>而不是值的变量。指针是一个复杂的主题，因此我们不会在这里讨论它们。</p></div><div class="col-sm-12"><p>另请注意，Objective-C 和 C 代码行必须以<code>&#39;;&#39;</code>结尾（分号）。这不是可选的 - 如果没有分号，代码将无法编译，并且您会收到错误。</p></div><div class="col-sm-12"><p> Swift 删除了分号（但如果您愿意，您实际上仍然可以使用它们）。</p></div><div class="col-sm-12"><p>接下来<code>GameViewController</code>存储更多对其他对象的引用，但这次是在 mtkView 属性对象内：</p></div><div class="col-sm-12"><p> <code>mtkView.device = defaultDevice</code></p></div><div class="col-sm-12"><p> <code>mtkView.backgroundColor = UIColor.black</code></p></div><div class="col-sm-12"><p>这意味着将默认渲染设备存储在 mtkView.device 属性中，并将黑色 UIColor 存储在 tkView.backgroundColor 中。</p></div><div class="col-sm-12"><p> <code>UIColor</code>是一个标准 UIKit 对象，用于指示颜色 - 在本例中设置为黑色，它将用作场景的背景颜色。每个<code>UIColor</code>对象都有一个<code>.backgroundColor</code>属性。</p></div><div class="col-sm-12"><p>请注意，您实际上在这里所做的是将对象的引用存储在属性中，这些属性本身就是此类属性的属性。一开始这会令人困惑，但一旦掌握了窍门，就很容易理解了。</p></div><div class="col-sm-12"><p>通过跨对象链接属性，您实际上只是将对象以菊花链方式链接在一起。</p></div><div class="col-sm-12"><p>您可以让属性指向属性，指向其他对象。理论上，属性引用的深度没有限制。</p></div><div class="col-sm-12"><p>在释放（销毁）一个对象之前，您应该在类的<code>deinit()</code>方法中将其所有属性设置为<code>nil</code> ，以确保释放对其他对象的所有引用。如果不这样做，可能会导致<em>内存泄漏</em>和不需要的<em>保留周期</em>。</p></div><div class="col-sm-12"><p>在 Objective-C 中<code>deinit()</code>称为<code>dealloc</code> 。</p></div><div class="col-sm-12"><p>继续，创建<code>Renderer</code>对象，传入<code>MTKView</code>对象，并将<code>Renderer</code>的引用（指针）存储在视图控制器的<code>renderer</code>属性中：</p></div><div class="col-sm-12"><p> <code>guard let newRenderer = Renderer(metalKitView: mtkView) else</code></p></div><div class="col-sm-12"><p> <code>renderer = newRenderer</code></p></div><div class="col-sm-12"><p>首先，创建对象，然后将对其的引用存储在属性中。</p></div><div class="col-sm-12"><p>然后<em>渲染器指向 MTKView 的</em>指针被发送<code>drawableSizeWillChange</code>消息：</p></div><div class="col-sm-12"><p> <code>renderer.mtkView(mtkView, drawableSizeWillChange: mtkView.drawableSize)</code></p></div><div class="col-sm-12"><p>这让渲染器知道视图的当前可绘制大小是多少，以便在将场景发送到 GPU 时知道如何以及在何处缩放场景。请注意，可绘制尺寸已存储在<code>MTKView</code>的<code>.drawableSize</code>属性中。</p></div><div class="col-sm-12"><p>这表明您可以将对象的属性作为参数传递给方法。</p></div><div class="col-sm-12"><p>最后，视图的委托被设置为渲染器本身：</p></div><div class="col-sm-12"><p> <code>mtkView.delegate = renderer</code></p></div><div class="col-sm-12"><p>回想一下，在<code>Renderer.swft</code>文件中， <code>Renderer</code>类被声明为符合<code>MTKViewDelegate</code>协议：</p></div><div class="col-sm-12"><p> <code>class Renderer: NSObject, MTKViewDelegate</code></p></div><div class="col-sm-12"><p>这就是允许将<code>mtkView.delegate</code>属性设置为<code>Renderer</code>对象的原因。如果<code>Renderer</code>类定义中没有<code>MTKViewDelegate</code>协议一致性， <code>mtkView.delegate = renderer</code>行在编译时可能会抛出警告或错误，指出<code>renderer</code>属性不符合<code>MTKViewDelegate</code>协议。</p></div><div class="col-sm-12"><p>另请注意，Xcode 新手的一个关键问题是，在销毁视图控制器对象<em>之前</em>，必须首先将其<code>.delegate</code>属性设置为<code>nil</code> 。如果不这样做，您的应用程序将会崩溃。</p></div><div class="col-sm-12"><p>这实际上适用于任何包含委托的 Swift 或 Objective-C 对象——而不仅仅是视图控制器。</p></div><div class="col-sm-12"><p>为什么？因为如果您不首先释放存储在委托属性中的引用，那么在包含对象实际从内存中消失的时间和系统意识到该对象已被销毁的时间之间，某些<em>其他</em>对象可能已向<em>委托</em>对象发送了<em>另一条</em>消息。</p></div><div class="col-sm-12"><p>没有意识到包含委托属性的对象不再存在，发送到委托的消息可能仍在等待处理 - 当它得到处理时，委托现在无效，因为它包含的对象不再存在。</p></div><div class="col-sm-12"><p>委托在内存中悬空，但其包含的对象早已消失 - 因此系统无法找到消息绑定的委托对象。</p></div><div class="col-sm-12"><p>繁荣——崩溃。</p></div><div class="col-sm-12"><p>在 Swift 和 Objective-C 中向<code>nil</code>发送消息不会产生任何有害影响，并且是有效的，但是向内存中应该有对象但实际上不是的地址发送消息肯定会导致崩溃。</p></div><div class="col-sm-12"><h2 data-anchor="run-the-app" id="run-the-app">运行应用程序</h2></div><div class="col-sm-12"><p>现在您终于准备好运行 Metal 示例应用程序了。</p></div><div class="col-sm-12"><p>单击 Xcode 窗口顶部的<strong>Play</strong>按钮，代码将被编译。如果没有错误并且一切正常，Xcode 将启动 iOS 模拟器并在其中运行应用程序：</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55525-112885-z-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112885-z-xl.jpg" alt="在 iOS 模拟器中运行的示例应用程序。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">在 iOS 模拟器中运行的示例应用程序。</span></div></div><div class="col-sm-12"><p>请注意，部分（但不是全部）Metal 代码无法在模拟器中运行。您必须在真正的 iOS 设备上运行这些 Metal 程序。 </p></div><div class="col-sm-12"><h2 data-anchor="final-interface-builder-tips" id="final-interface-builder-tips">最终界面生成器提示</h2></div><div class="col-sm-12"><p>作为最后一次查看示例项目，我们需要检查 Interface Builder 中的一些项目。</p></div><div class="col-sm-12"><div class="align-center"><a href="https://photos5.appleinsider.com/gallery/55525-112888-Screenshot-6-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112888-Screenshot-6-xl.jpg" alt="在 Xcode 中选择 Main.storyboard 文件。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">在 Xcode 中选择 Main.storyboard 文件。</span></div></div><div class="col-sm-12"><p>如果您是 Xcode 和 Interface Builder 的新手，请注意大多数新手忽视的 iOS 开发的一个关键方面是类名。 Xcode 中每个项目的类名必须与源代码文件中定义的每个类名完全匹配。</p></div><div class="col-sm-12"><p>如果不这样做，您的应用程序将无法运行。</p></div><div class="col-sm-12"><p>例如，视图控制器必须在右侧 Xcode 对象信息面板的“自定义类”字段中设置其类名。为此，您必须单击 Storyboard 或 .nib（界面生成器）文件，然后单击场景或视图层次结构中的类名称，然后在右侧检查器中验证或设置类名称：</p></div><div class="col-sm-12"><div class="align-center"><a href="https://photos5.appleinsider.com/gallery/55525-112886-Screenshot-7-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112886-Screenshot-7-xl.jpg" alt="确保在 Storyboard 文件中设置类名称。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">确保在 Storyboard 文件中设置类名称。</span></div></div><div class="col-sm-12"><p>对于视图及其类名以及其他对象（例如委托属性）也是如此。即使只有一个类名或属性设置失败，也可能会导致应用程序无法运行。</p></div><div class="col-sm-12"><p>其中大多数通常在 Xcode 创建的模板文件中设置，但检查一下也没什么坏处。</p></div><div class="col-sm-12"><p>奇怪的是，Xcode 模板文件中没有设置的一件事是视图控制器及其视图属性之间的连接。您必须手动建立这些连接，否则您的应用程序将无法运行。</p></div><div class="col-sm-12"><p>例如，在我们的示例项目中，如果您按住 Control 键并单击视图层次结构中的 Game View Controller 对象，您会注意到 View 属性设置为 nil。您需要通过按住 Control 单击然后从游戏视图控制器拖动到层次结构中的视图来将视图连接到游戏视图控制器。</p></div><div class="col-sm-12"><p>当您这样做时，将出现“Outlets”面板，您需要手动将“view”属性连接到游戏视图控制器对象：</p></div><div class="col-sm-12"><div class="align-center"><a href="https://photos5.appleinsider.com/gallery/55525-112887-Screenshot-9-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55525-112887-Screenshot-9-xl.jpg" alt="通过 Outlets 窗格连接视图控制器和视图。" height="768" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">通过 Outlets 窗格连接视图控制器和视图。</span></div></div><div class="col-sm-12"><p>如果没有此连接，该应用程序将无法运行。默认情况下，Xcode 创建的示例模板文件<em>不会</em>为您建立此连接。</p></div><div class="col-sm-12"><p>请注意，“插座”面板中插座名称旁边的小点指示是否连接了任何给定的插座。</p></div><div class="col-sm-12"><p>您可能还注意到 AppDelegate.swift 文件包含<code>AppDelegate</code>的子类，其中包含空的样板代码，但应用程序委托文件中的任何位置都没有对<code>GameViewController</code>的引用。</p></div><div class="col-sm-12"><p>那么当应用程序运行时<code>GameViewController</code>是如何加载的呢？</p></div><div class="col-sm-12"><p>答案是故事板文件定义了初始视图控制器，并在应用程序首次运行时自动加载它。如果您使用较旧的 .nib 样式（Interface Builder）文件和代码来加载初始视图控制器，则您的应用程序将手动创建并加载 AppDelegate 的<code>application:didFinishLaunchingWithOptions</code>方法的<code>GameViewController</code>对象实例。</p></div><div class="col-sm-12"><p>一旦视图控制器加载了视图，如果将 AppDelegate 设置为视图控制器的委托，您将在应用程序委托上收到 viewDidLoad() 消息。</p></div><div class="col-sm-12"><h2 data-anchor="additional-resources" id="additional-resources"> 其他资源</h2></div><div class="col-sm-12"><p>除了 Apple 的在线 MetalKit 和 Metal 文档之外，您可能还想查看许多其他优秀的 Metal 资源。</p></div><div class="col-sm-12"><p>请务必查看 metalkit.org 和 metalbyexample.com，它们有很多关于 MetalKit 和 Metal 本身的精彩教程。</p></div><div class="col-sm-12"><p>另外，请务必获得有关 Metal 的权威第三方书籍，即 Janie Clayton 编写的<a href="https://www.amazon.com/Metal-Programming-Guide-Tutorial-Reference-ebook/dp/B077Y3DGBP/?tag=reality" rel="sponsored">《Metal 编程指南：通过 Swift 进行的教程和参考》</a> ，它教您有关 Metal 编程的所有知识。</p></div><div class="col-sm-12"><p>这是一个很长的教程，但现在您应该对 Metal 应用程序的工作原理以及如何在应用程序中使用 MetalKit 轻松加载纹理并在 iOS 应用程序的视图中渲染 Metal 对象有更深入的了解。</p></div><p></p> ]]>;</description><pubDate> Sun, 06 Aug 2023 20:58:13 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/inside/xcode/tips/understanding-metalkit-getting-started-with-apples-graphics-framework</guid><link/> https://appleinsider.com/inside/xcode/tips/understanding-metalkit-getting-started-with-apples-graphics-framework <author><![CDATA[Chip Loder]]></author></item><item><title><![CDATA[Grab Apple's M1 Max 16" MacBook Pro with 64GB RAM, 1TB SSD for $2,599 ($1,100 off)]]></title><description><![CDATA[<div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><h2 data-anchor="save-1100-on-a-loaded-macbook-pro" id="save-1100-on-a-loaded-macbook-pro">购买已装满的 MacBook Pro 可节省 1,100 美元</h2></div><div class="col-sm-12"><p><a href="https://adorama.rfvk.net/c/81003/51926/1036?subId1=da-macp-16in-m1-max-64gb-1tb-2599-080523&amp;u=https%3A%2F%2Fwww.adorama.com%2Facmk1f3lla12.html" rel="sponsored" target="blank">独家价格</a>为 900 美元即时回扣，使用促销代码<strong>APINSIDER</strong>即可再减 200 美元，使 Apple 授权经销商 Adorama 的价格降至 2,599 美元。</p></div><div class="col-sm-12"><div class="align-center"> <a class="deal-highlight" href="https://prices.appleinsider.com/product/macbook-pro-16-inch-2021/z14y0016u">使用代码 APINSIDER</a></div></div><div class="col-sm-12"><p>这一<a href="https://prices.appleinsider.com/product/macbook-pro-16-inch-2021/z14y0016u" title="M1 Max MacBook Pro 16 英寸 64GB RAM 1TB SSD 银价">特殊配置</a>采用了 Apple 16 英寸 MacBook Pro，配备高端 M1 Max 芯片，拥有 24 核 GPU。它还拥有 64GB 内存，是 2021 年末标准 MacBook Pro 内存容量的四倍。 1TB 的存储空间充足，进一步保证了该机器的未来发展，该机器安装在 Apple 优雅的银色机箱中。 </p></div><div class="col-sm-12"><h2 data-anchor="bonus-discount-applecare-with-coupon" id="bonus-discount-applecare-with-coupon">使用优惠券可享受 AppleCare 额外折扣</h2></div><div class="col-sm-12"><p>除了笔记本电脑本身的大幅折扣之外，与系统一起购买时，相同的 APINSIDER 促销代码还可享受三年 AppleCare 服务 80 美元的优惠，从而将扩展保护计划的成本降至 319 美元，让您更加安心。</p></div><div class="col-sm-12"><p>根据我们的<a href="https://prices.appleinsider.com/macbook-pro-16-inch-2021">16 英寸 MacBook Pro 价格指南</a>（该指南追踪当前和清仓产品线的<a href="https://appleinsider.com/deals/best-macbook-pro-deals">最佳 MacBook Pro 交易）</a> ，这是高级配置的最佳价格。</p></div><div class="col-sm-12"><p>只需三个简单步骤即可激活 APINSIDER 优惠券。</p></div><div class="col-sm-12"><ol><li>通过此<a href="https://adorama.rfvk.net/c/81003/51926/1036?subId1=da-macp-16in-m1-max-64gb-1tb-2599-080523&amp;u=https%3A%2F%2Fwww.adorama.com%2Facmk1f3lla12.html" rel="sponsored" target="blank">定价链接</a>进行购物，并将 16 英寸 MacBook Pro 添加到您的购物车。</li><li>继续结账，当您进入第 3 步（付款）时，查找带有礼品图标的链接，上面写着：“您有礼品卡或促销代码吗？”<div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/51735-102497-Screenshot-2022-12-02-at-11619-PM-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/51735-102497-Screenshot-2022-12-02-at-11619-PM-xl.jpg" alt="如何打开 Adorama 优惠券代码字段" height="166" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div></li><li>单击该链接可显示优惠券代码字段并输入 APINSIDER。它看起来是这样的：<div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/51735-102499-Screenshot-2022-12-02-at-11458-PM-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/51735-102499-Screenshot-2022-12-02-at-11458-PM-xl.jpg" alt="在哪里输入 Adorama 优惠券代码" height="210" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a> <span class="carousel-caption"></span></div></li></ol></div><div class="col-sm-12"><h2 data-anchor="plus-save-with-even-more-deals" id="plus-save-with-even-more-deals">另外，享受更多优惠，节省更多</h2></div><div class="col-sm-12"><div class="align-center"><a href="https://prices.appleinsider.com/"><img src="https://photos5.appleinsider.com/gallery/47002-91572-Apple-Price-Guide-hero-graphic-xl.jpg" alt="最优惠的苹果价格" height="720" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div></div><div class="col-sm-12"><p>从新款 MacBook Air 15 英寸到 M2 Mac mini， <em>AppleInsider</em>读者可以抢购更多 Apple 硬件的独家折扣。请务必访问我们的<a href="https://prices.appleinsider.com/">Apple 价格指南，</a>了解 Apple 经销商的最新销售和特别优惠。</p></div><div class="col-sm-12"><ul><li> <strong><a href="https://appleinsider.com/articles/23/08/02/apples-13-inch-m2-macbook-air-is-on-sale-for-949-just-in-time-for-back-to-school">Apple 13 英寸 M2 MacBook Air 在最新返校促销中售价 949 美元</a></strong></li><li><strong><a href="https://appleinsider.com/articles/23/08/03/exclusive-macbook-pro-14-16-inch-deals-save-up-to-1300-prices-start-at-1549">MacBook Pro 14 和 16 英寸专享优惠：最高节省 1,300 美元，起价 1,549 美元</a></strong></li><li><strong><a href="https://appleinsider.com/articles/23/07/08/lowest-price-ever-macbook-pro-14-inch-with-32gb-ram-1tb-ssd-on-sale-for-1999-plus-60-off-applecare">Apple MacBook Pro 14 英寸（配备 32GB RAM、1TB SSD）售价 1,999 美元，还可享受 60 美元的 AppleCare 优惠</a></strong></li><li><strong><a href="https://shop.appleinsider.com/sales/microsoft-office-home-business-for-mac-2021-lifetime-license-6?utm_source=appleinsider.com&amp;utm_medium=referral&amp;utm_campaign=microsoft-office-home-business-for-mac-2021-lifetime-license-6_071423&amp;utm_term=scsf-575207&amp;utm_content=a0x1p000004ivavqa0&amp;scsonar=1">只需 39.99 美元即可购买 Office for Mac Home &amp; Business 2021，折扣 85%</a></strong></li></ul></div><p></p> ]]>;</description><pubDate> Sun, 06 Aug 2023 20:07:56 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/articles/23/08/06/grab-apples-m1-max-16-macbook-pro-with-64gb-ram-1tb-ssd-for-2599-1100-off</guid><link/> https://appleinsider.com/articles/23/08/06/grab-apples-m1-max-16-macbook-pro-with-64gb-ram-1tb-ssd-for-2599-1100-off <author><![CDATA[Christine McKee]]></author></item><item><title><![CDATA[iPhone 15 Ultra case photos leak shows rumored 'Action' button]]></title><description><![CDATA[<p class="col-sm-12 article-lead">据称适用于<a href="https://appleinsider.com/inside/iphone-15" title="iPhone 15" data-kpt="1">iPhone 15</a> Ultra 的手机壳照片与苹果将在智能手机侧面用第三个“操作”按钮取代静音开关的传言相符。</p><div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><p>有传言称静音开关的日子已经屈指可数了，它将被多功能<a href="https://appleinsider.com/articles/23/04/17/contentious-iphone-15-pro-rumor-season-continues-with-details-about-action-button">“操作”按钮</a>取代。周日的照片泄露显示了苹果最高规格型号的可能情况，这无疑与这些谣言有关。</p></div><div class="col-sm-12"><p> X 上的<a href="https://twitter.com/majinbuofficial/status/1688123155577966592">连环泄密者</a>“Majin Bu”的照片被泄密者识别为 iPhone 15 Ultra。<a href="https://twitter.com/majinbuofficial/status/1688123941485723648">这些外壳</a>由绿色、黑色和深蓝色组成，背面带有 Apple 品牌标志，暗示它们实际上是 Apple 产品。</p></div><div class="col-sm-12"><p>在一条澄清的推文中，泄密者<a href="https://twitter.com/MajinBuOfficial/status/1688129217446174721">确实声明</a>“这是复制品，不是官方产品”。这意味着这些保护壳可能不一定来自苹果供应商，而且实际上可能不是真正的产品。</p></div><div class="col-sm-12"><div class="primis-ad-wrap"></div></div><div class="col-sm-12"><p> 然而，由于泄密者在与苹果相关的泄密事件方面有着相当良好的记录，因此这似乎比不可信。 </p></div><div class="col-sm-12"><div class="align-center"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">显然，iPhone 15 Ultra 型号的外壳显示了第三个按钮，该按钮应该取代旧的静音切换器<a href="https://t.co/6XIKgBMJVN">pic.twitter.com/6XIKgBMJVN</a></p> — Majin Bu (@MajinBuOfficial) <a href="https://twitter.com/MajinBuOfficial/status/1688123155577966592?ref_src=twsrc%5Etfw">2023 年 8 月 6 日</a></blockquote></div></div><div class="col-sm-12"><p>图像显示，箱子的左侧有三个按钮，下面的两个按钮比上面的按钮稍大，第三个按钮稍微凹进，第三个按钮也稍微小一点。第三个按钮就是传闻中的“操作”按钮。</p></div><div class="col-sm-12"><p>这些保护壳的其他照片显示，它们延续了苹果公司正常的设计语言，包括柔软的衬里、 <a href="https://appleinsider.com/inside/magsafe" title="磁安全" data-kpt="1">MagSafe</a>的警示环、摄像头凸起周围的小唇缘以及背面凹陷的苹果标志。</p></div><div class="col-sm-12"><p>虽然看似合理，但不能保证这些照片描绘的是合法产品，而且苹果公司之外没有人真正知道该公司今年秋天将推出什么产品。</p></div><div class="col-sm-12"><p>动作按钮似乎确实出现在 iPhone 15 Pro 或 Ultra 机型中， <a href="https://appleinsider.com/inside/ios-17" title="iOS 17" data-kpt="1">iOS 17</a>中的代码参考提到了如何对按钮进行个性化以<a href="https://appleinsider.com/articles/23/07/26/ios-17-code-hints-at-action-button-in-iphone-15-pro-models">执行各种操作</a>，例如轻按即可激活相机的自动对焦并拍摄照片全压。</p></div><p></p> ]]>;</description><pubDate> Sun, 06 Aug 2023 18:53:53 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/articles/23/08/06/iphone-15-ultra-case-photos-leak-shows-rumored-action-button</guid><link/> https://appleinsider.com/articles/23/08/06/iphone-15-ultra-case-photos-leak-shows-rumored-action-button <author><![CDATA[Malcolm Owen]]></author></item><item><title><![CDATA[Daily deals: Save $250 on the M2 Pro 14-inch MacBook Pro, 19% off Nintendo Switch, $150 off Toshiba 65-inch smart TV]]></title><description><![CDATA[<div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><p> <em>AppleInsider</em>团队在互联网上搜寻在线零售商的顶级优惠，展示一系列热门科技产品的无与伦比的优惠，包括<a href="https://appleinsider.com/deals">Apple 产品、电视、配件和其他小玩意的折扣</a>。我们每天都会发布我们的热门发现，以帮助您省钱。 </p></div><div class="col-sm-12"><h2 data-anchor="top-deals-for-august-6" id="top-deals-for-august-6"> 8 月 6 日热门优惠</h2></div><div class="col-sm-12"><ul><li>14 英寸 MacBook Pro M2 Pro（12 核 CPU、19 核 GPU）、16GB 内存、1TB SSD、深空灰：Apple 经销商<a href="https://prices.appleinsider.com/product/macbook-pro-14-inch-2023/mphf3ll/a">售价 2,249 美元（优惠 250 美元）</a></li><li> Prism Drive 安全云存储：终身订阅 (20TB)：StackCommerce <a href="https://shop.appleinsider.com/sales/prism-drive-secure-cloud-storage-20tb-lifetime-subscription?utm_source=appleinsider.com&amp;utm_medium=referral&amp;utm_campaign=prism-drive-secure-cloud-storage-20tb-lifetime-subscription_080223&amp;utm_term=scsf-576647&amp;utm_content=a0x1p000005ot7uqas&amp;scsonar=1" rel="sponsored" target="blank">99.99 美元（33% 折扣）</a></li><li>飞利浦 Hue 白色和彩色 Ambiance Econic Square 户外壁灯和吸顶灯：亚马逊<a href="https://www.amazon.com/dp/B07NDF3VPH?th=1&amp;tag=aidailydeals-20" rel="sponsored" target="blank">117.55 美元（31% 折扣）</a></li><li> Dyson V15 Detect Extra 无绳吸尘器：百思买 Total Tech 会员<a href="https://shop-links.co/1816001583416897754?u1=dd-othr-bby-dyson-v11-080523" rel="sponsored" target="blank">449.99 美元（立减 350 美元）</a></li><li> Nintendo Switch OLED（日本型号）：Woot <a href="https://www.anrdoezrs.net/click-1989299-13142092?sid=dd-othr-woot-nintendo-switch-080623&amp;url=https%3A%2F%2Felectronics.woot.com%2Foffers%2Fnew-nintendo-switch-oled-japanese-model" rel="sponsored" target="blank">售价 289.99 美元（优惠 70 美元）</a></li><li> Lego Art 花卉艺术 31207 三合一套装：亚马逊<a href="https://www.amazon.com/gp/product/B09XVH1MV9/?tag=aidailydeals-20" rel="sponsored" target="blank">55.99 美元（立减 24 美元）</a></li><li> Target 计算器<a href="https://shop-links.co/1816016157618122371?u1=dd-othr-target-calculators-080623" rel="sponsored" target="blank">最高可节省 30%</a></li><li>东芝 65 英寸 Class C350 LED 4K 超高清智能 Fire 电视：亚马逊<a href="https://www.amazon.com/gp/product/B0BTTTWHBW/?tag=aidailydeals-20" rel="sponsored" target="blank">379.99 美元（优惠 150 美元）</a> </li></ul></div><div class="col-sm-12"><h2 data-anchor="more-summer-tech-bargains" id="more-summer-tech-bargains">更多夏季科技特价商品</h2></div><div class="col-sm-12"><div class="align-center"><a href="https://photos5.appleinsider.com/gallery/55750-113276-deals-aug-5-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55750-113276-deals-aug-5-xl.jpg" alt="Bose QuietComfort 耳塞 II 享受 17% 折扣" height="731" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"> <span class="carousel-caption">Bose QuietComfort 耳塞 II 享受 17% 折扣</span></div></div><div class="col-sm-12"><p>您仍然可以购买我们周六分享的大部分优惠。查看昨天最热门的折扣以获得最低价格。</p></div><div class="col-sm-12"><ul><li> 14 英寸 MacBook Pro M1 Pro，8 核 CPU，14 核 GPU，32GB RAM，512GB，银色： <a href="https://prices.appleinsider.com/product/macbook-pro-14-inch-2021/z15j001w9">1,799 美元（优惠 200 美元）</a> ，使用 Adorama 促销代码<strong>APINSIDER</strong></li><li> WD_BLACK 2TB D50 游戏扩展坞 NVMe SSD WDBA3U0020BBK-NESN：亚马逊<a href="https://www.amazon.com/dp/B08FG4RG5H?tag=aidailydeals-20" rel="sponsored" target="blank">297.97 美元（57% 折扣）</a></li><li>亚马逊 iRobot Roomba i4 和 i4 Plus <a href="https://www.amazon.com/deal/b1cec03f?showVariations=true&amp;pf_rd_r=FHMG8VGNY6XGZT5MCPCS&amp;tag=aidailydeals-20" rel="sponsored" target="blank">最高可节省 42%</a></li><li> Bose QuietComfort 45 无线耳机：亚马逊售价<a href="https://www.amazon.com/deal/373ab649?showVariations=true&amp;pf_rd_r=NT9C8E9EC48308H53815&amp;tag=aidailydeals-20" rel="sponsored" target="blank">279 美元</a></li><li>Bose QuietComfort 耳塞 II：亚马逊售价<a href="https://www.amazon.com/Bose-QuietComfort-Cancelling-Personalized-Cancellation/dp/B0BS1VXF6K?th=1&amp;tag=aidailydeals-20" rel="sponsored" target="blank">249 美元</a></li><li>eero Pro 6E AXE5400 三频网状 Wi-Fi 6E 系统（3 件装）：百思买<a href="https://shop-links.co/1815920106936186779?u1=dd-othr-bby-eero-pro-3pk-080523" rel="sponsored" target="blank">399.99 美元（优惠 150 美元）</a> </li></ul></div><div class="col-sm-12"><h2 data-anchor="plus-save-with-even-more-deals" id="plus-save-with-even-more-deals">另外，享受更多优惠，节省更多</h2></div><div class="col-sm-12"><div class="align-center"><a href="https://prices.appleinsider.com/"><img src="https://photos5.appleinsider.com/gallery/47002-91572-Apple-Price-Guide-hero-graphic-xl.jpg" alt="最优惠的苹果价格" height="720" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div></div><div class="col-sm-12"><p>从新款 MacBook Air 15 英寸到 M2 Mac mini， <em>AppleInsider</em>读者可以抢购更多 Apple 硬件的独家折扣。请务必访问我们的<a href="https://prices.appleinsider.com/">Apple 价格指南，</a>了解 Apple 经销商的最新销售和特别优惠。</p></div><div class="col-sm-12"><ul><li> <strong><a href="https://appleinsider.com/articles/23/08/02/apples-13-inch-m2-macbook-air-is-on-sale-for-949-just-in-time-for-back-to-school">Apple 13 英寸 M2 MacBook Air 在最新返校促销中售价 949 美元</a></strong></li><li><strong><a href="https://appleinsider.com/articles/23/08/03/exclusive-macbook-pro-14-16-inch-deals-save-up-to-1300-prices-start-at-1549">MacBook Pro 14 和 16 英寸专享优惠：最高节省 1,300 美元，起价 1,549 美元</a></strong></li><li><strong><a href="https://appleinsider.com/articles/23/07/08/lowest-price-ever-macbook-pro-14-inch-with-32gb-ram-1tb-ssd-on-sale-for-1999-plus-60-off-applecare">Apple MacBook Pro 14 英寸（配备 32GB RAM、1TB SSD）售价 1,999 美元，还可享受 60 美元的 AppleCare 优惠</a></strong></li><li><strong><a href="https://appleinsider.com/articles/23/07/20/take-81-off-a-standalone-microsoft-office-2021-license-for-windows-or-mac">购买适用于 Windows 或 Mac 的独立 Microsoft Office 2021 许可证可节省 81%</a></strong></li></ul></div><p></p> ]]>;</description><pubDate> Sun, 06 Aug 2023 15:29:05 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/articles/23/08/06/daily-deals-save-250-on-the-m2-pro-14-inch-macbook-pro-19-off-nintendo-switch-150-东芝 65 英寸智能电视</guid><link/>https://appleinsider.com/articles/23/08/06/daily-deals-save-250-on-the-m2-pro-14-inch-macbook-pro-19-off-nintendo-switch-150-东芝 65 英寸智能电视<author><![CDATA[Christine McKee]]></author></item><item><title><![CDATA[Smuggler taped-up with 68 iPhones didn't fool Chinese customs officials]]></title><description><![CDATA[<div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><p> 7月31日，该男子被中国清茂港口岸管理部门发现，该男子试图通过非申报通道，在未申报的情况下携带大量iPhone手机过关。</p></div><div class="col-sm-12"><p>然而，眼尖的官员发现了这名男子及其服装的一些问题。虽然他穿着一件藏蓝色的短袖衬衫，但身体的其他部分似乎有些不成比例。</p></div><div class="col-sm-12"><p>据<em>Cnbeta</em><a href="https://www.cnbeta.com.tw/articles/tech/1374737.htm">报道</a>，检查中发现了 68 部旧 iPhone，这些旧 iPhone 被胶带包裹并捆绑在该人的腰部、腹部和小腿上。在一张照片中，薄薄的保鲜膜和包装胶带被用来将 iPhone 固定在人腿的内侧和外侧区域。</p></div><div class="col-sm-12"><div class="primis-ad-wrap"></div></div><div class="col-sm-12"><p> 据报道，该男子已根据进口法规受到处理。</p></div><div class="col-sm-12"><p>虽然通过海关走私物品并不新鲜或完全不常见，但一次走私的货物数量过多以及使用的方法却很不寻常。即便如此，这并不是第一次有人试图通过将如此多的 iPhone 粘在一个人的身上来移动它们。</p></div><div class="col-sm-12"><p> 2017 年，一名女子因在衣服内走私<a href="https://appleinsider.com/articles/17/07/18/smuggler-busted-with-102-apple-iphones-by-shenzhen-china-customs-officials">42 磅</a>违禁品被捕，其中包括 102 部 iPhone 和 15 块高端手表。与此同时<a href="https://appleinsider.com/articles/15/01/17/three-men-tunnel-into-beijing-warehouse-make-off-with-300000-worth-of-iphones">，2015 年</a>，一名男子在香港边境被捕，试图将 94 部 iPhone 走私到中国大陆，这些 iPhone 也同样用胶带和包装纸绑在他的身上。</p></div><div class="col-sm-12"><p>在每起案件中，边防警卫都收到了电话骡子不寻常的行走姿势的警报。</p></div><p></p> ]]>;</description><pubDate> Sun, 06 Aug 2023 14:04:02 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/articles/23/08/06/man-fails-to-smuggle-68-iphones-by-taping-them-to-his-body</guid><link/> https://appleinsider.com/articles/23/08/06/man-fails-to-smuggle-68-iphones-by-taping-them-to-his-body <author><![CDATA[Malcolm Owen]]></author></item><item><title><![CDATA[Hands on: connect cadence and speed sensors directly to Apple Watch with watchOS 10]]></title><description><![CDATA[<div class="col-sm-12"><div class="align-center"></div></div><div class="col-sm-12"><p>对于狂热的自行车骑手来说，速度和踏频跟踪并不是一个新概念。许多蓝牙传感器已经存在多年，可以实现简单的数据收集，但它们需要笨拙的第三方应用程序和健康集成。</p></div><div class="col-sm-12"><p>借助<a href="https://appleinsider.com/inside/watchos-10" title="watchOS 10" data-kpt="1">watchOS 10</a> ，用户可以将兼容的传感器直接与 Apple Watch 配对。这消除了对第三方客户端的需求，并直接与锻炼、健身和健康应用程序功能集成。</p></div><div class="col-sm-12"><p>各种健康传感器可以与 Apple Watch 配对，以获取额外的跟踪指标，例如步频、速度和功率传感器。我们测试了<a href="https://www.amazon.com/dp/B088WTRDKG/?tag=reality" rel="sponsored">Moofit 的</a>速度和踏频传感器。</p></div><div class="col-sm-12"><div class="primis-ad-wrap"></div></div><div class="col-sm-12"><p> 传感器很小，并且相对容易用附带的橡皮筋连接。它们使用 CR2032 电池，可持续使用约 9 至 12 个月。</p></div><div class="col-sm-12"><p>速度传感器连接到轮毂，而踏频传感器连接到自行车的曲柄臂。一旦插入传感器电池，它们就会处于活动状态并准备配对。</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55676-113269-Cadence-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55676-113269-Cadence-xl.jpg" alt="踏频传感器" height="738" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"><span class="carousel-caption">踏频传感器</span></div></div><div class="col-sm-12"><p>Apple Watch 的蓝牙设置立即显示了传感器。传感器名称大多是乱码，例如 CS8L-C 或类似名称，但这并不重要，只要它们都出现并配对即可。</p></div><div class="col-sm-12"><p>配对后，我们所要做的就是开始骑行并开始骑行锻炼。速度和步频指标显示在跟踪的锻炼中。</p></div><div class="col-sm-12"><div class="align-center"> <a href="https://photos5.appleinsider.com/gallery/55676-113270-Bluetooth-xl.jpg" target="_blank"><img src="https://photos5.appleinsider.com/gallery/55676-113270-Bluetooth-xl.jpg" alt="Apple Watch 蓝牙设置" height="738" loading="lazy" class="img-responsive article-image" referrerpolicy="no-referrer"></a></div><div class="col-sm-12"> <span class="carousel-caption">Apple Watch 蓝牙设置</span></div></div><div class="col-sm-12"><p><a href="https://appleinsider.com/inside/iphone" title="iPhone" data-kpt="1">iPhone</a>上新的自行车锻炼实时活动还可以显示速度和踏频数据。一个视图有一个活跃的车速表，但蓝牙有短暂的滞后，因此如果比电动自行车的车速表慢一秒，速度也是准确的。</p></div><div class="col-sm-12"><p>那些希望从骑行活动跟踪中获得更多收益的人可以从 watchOS 10 中轻松获得提升。我们推荐类似我们测试过的 Moofit 传感器，该传感器<a href="https://www.amazon.com/dp/B088WTRDKG/?tag=reality" rel="sponsored">在亚马逊上售价 32.99 美元</a>，两包一包。</p></div><p></p> ]]>;</description><pubDate> Sun, 06 Aug 2023 11:15:02 GMT</pubDate><guid ispermalink="false"> https://appleinsider.com/articles/23/08/05/hands-on-connect-cadence-and-speed-sensors-directly-to-apple-watch-with-watchos-10</guid><link/> https://appleinsider.com/articles/23/08/05/hands-on-connect-cadence-and-speed-sensors-directly-to-apple-watch-with-watchos-10<author><![CDATA[Wesley Hilliard]]></author></item></channel></rss>